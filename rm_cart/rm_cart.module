<?php

/**
* Implements hook_menu().
*/
function rm_cart_menu() {
	$items = array();

    $items['addtocart/%/%/%/%/%'] = array(
        'page callback' => 'rm_cart_add_to_cart',
        'page arguments' => array(1,2,3,4,5),
        'access arguments' => array('access content'),
	);
    $items['removefromcart/%'] = array(
        'page callback' => 'rm_cart_remove_from_cart',
        'page arguments' => array(1),
        'access callback' => 'rm_cart_user_owns_cartitem',
        'access arguments' => array(1),
	);
    $items['checkout/%user'] = array(
        'title' => 'Checkout',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_cart_checkout', 1),
        'access callback' => 'rm_cart_checkout_is_possible',
        'access arguments' => array(1),
        'file' => 'rm_cart.inc',
        'file path' => drupal_get_path('module', 'rm_cart'),
    );
    $items['order/%'] = array(
        'title' => 'Confirm your order',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_cart_checkout_confirm', 1),
        'access callback' => 'rm_cart_user_owns_order',
        'access arguments' => array(1),
        'file' => 'rm_cart.inc',
        'file path' => drupal_get_path('module', 'rm_cart'),
    );
    //Used to post and redirect sofort端berweisung payments to provider gateway
    $items['internal/provider'] = array(
        'title' => t('Redirect to the payment provider'),
        'page callback' => 'rm_cart_redirectpayment',
        'access arguments' => array('access content'),
    );
	//Used for Novalnet Payment notification
    $items['internal/ibt'] = array(
        'title' => t('Confirmation'),
        'page callback' => 'rm_cart_novalnet_confirm',
        'access arguments' => array('access content'),
    );
    //Used for PayPal IPN
    $items['internal/confirmation'] = array(
        'title' => t('Confirmation'),
        'page callback' => 'rm_cart_paypal_ipn',
        'access arguments' => array('access content'),
    );
	return $items;
}
//TBD noch pr端fen ob das stimmt und klappt
function rm_cart_novalnet_confirm() {
	watchdog('novalnet_ibt', 'path has been triggered: @postdata', array('@postdata' => print_r($_REQUEST, TRUE)));
	if($_REQUEST['status'] && $_REQUEST['status_message']) {
		watchdog('novalnet_ibt', 'notification from novalnet received: @postdata', array('@postdata' => print_r($_REQUEST, TRUE)));
        //if (rm_cart_novalnet_checkHash($_REQUEST, 'eb1e78328c46506b46a4ac4a1e378b91') == true) {
        //for some reason request does not contain hash2 as stated in docs
        if(true) {
            //daten sind in ordnung
            watchdog('novalnet_ibt', 'success checkhash');
            if($_REQUEST['status'] == 100) {
                //success
                watchdog('novalnet_ibt', 'success txn');
                rm_cart_successfulpayment($_REQUEST['uniqid']);
            }
            else {
                //failure
                watchdog('novalnet_ibt', 'failure txn');
            }
        }
        else {
            //daten sind mglw manipuliert
            watchdog('novalnet_ibt', 'failure checkhash');
            //send alertmail
        }
	}
}

function rm_cart_redirectpayment() {
	$urlparam = drupal_get_query_parameters();

	$nn_url = variable_get('regiomino_payment_novalnet_onlinepayport', 'https://payport.novalnet.de/online_transfer_payport');
	$form = '';
  if ($urlparam) {
    $form .= t('Please wait, you are now being redirected automatically. If this does not happen within 2 minutes, please click on the button below to continue!');
    $form .= "<form action='$nn_url' method='post'>";
    foreach($urlparam as $k=>$v){
      $form .= "<input type='hidden' name='$k' value='$v'>";
    }
    $form .= "<input type='submit' name='submit2' value='" . t('Perform payment') . "'>";
    $form .= "</form>";
    $form .= "<script type='text/javascript'>document.forms[2].submit();</script>";
		return $form;
  }
	else {
		drupal_not_found();
	}
}

function rm_cart_paypal_ipn() {

	$postdata = serialize($_POST);
	watchdog('order', 'my confirmation post data: @postdata', array('@postdata' => $postdata));
	if (isset($_POST["txn_id"]) && isset($_POST["txn_type"])){
		$req = 'cmd=_notify-validate';
		
		// assign posted variables to local variables
		$data['item_name']			= $_POST['item_name'];
		$data['item_number'] 		= $_POST['item_number'];
		$data['payment_status'] 	= $_POST['payment_status'];
		$data['payment_amount'] 	= $_POST['mc_gross'];
		$data['payment_currency']	= $_POST['mc_currency'];
		$data['txn_id']				= $_POST['txn_id'];
		$data['receiver_email'] 	= $_POST['receiver_email'];
		$data['payer_email'] 		= $_POST['payer_email'];
		$data['custom'] 			= $_POST['custom'];
		$data['invoice'] 			= $_POST['invoice'];
		
		foreach ($_POST as $key => $value) {
			$value = urlencode(stripslashes($value));
			$value = preg_replace('/(.*[^%^0^D])(%0A)(.*)/i','${1}%0D%0A${3}',$value);// IPN fix
			$req .= "&$key=$value";
		}

		/* watchdog('invoice_number', '@ordernumber', array('@ordernumber' => $data['invoice']));
		watchdog('serialize_invoice_number', '@ordernumber', array('@ordernumber' => serialize($data['invoice']))); */
		// post back to PayPal system to validate
		$header = "POST /cgi-bin/webscr HTTP/1.0\r\n";
		$header .= "Content-Type: application/x-www-form-urlencoded\r\n";
		$header .= "Content-Length: " . strlen($req) . "\r\n\r\n";
		
		$fp = fsockopen ('ssl://www.paypal.com', 443, $errno, $errstr, 30);	

		if (!$fp) {
			// HTTP ERROR
		} else {
			fputs ($fp, $header . $req);
			while (!feof($fp)) {
				$res = fgets ($fp, 1024);
				if (strcmp($res, "VERIFIED") == 0) {
					// Used for debugging
					//watchdog('verified_response', 'Verified Response<br />data = <pre>@somestring</pre>', array('@somestring' => serialize($post)));
					//Validate payment (Check unique txnid & correct price)
					//$valid_txnid = check_txnid($data['txn_id']);
					$valid_txnid = TRUE;
					//$valid_price = check_price($data['payment_amount'], $data['item_number']);
					$valid_price = TRUE;
					// PAYMENT VALIDATED & VERIFIED!
					if($valid_txnid && $valid_price){
						rm_cart_successfulpayment($data['custom']);
					}
                    else {
					}
				}else if (strcmp ($res, "INVALID") == 0) {
					// PAYMENT INVALID & INVESTIGATE MANUALLY!
					watchdog('verified_response', 'Invalid Response<br />data = <pre>@somestring</pre>', array('@somestring' => serialize($post)));
				}
			}
			fclose ($fp);
		}
	}
}

function rm_cart_successfulpayment($order_number) {
	watchdog('order', 'Payment for order @number received', array('@number' => $order_number));
    rm_cart_change_order_status($order_number, 'processing');
    //TBD Send mail to confirm payment receiption and status change
}

function rm_cart_novalnet_decode($data, $pw) {
	$data = trim($data);
	if ($data == '') {
		return 'Error: no data';
	}
	if (!function_exists('base64_decode') or !function_exists('pack') or !function_exists('crc32')) {
		return 'Error: func base64_decode/pack/crc32 n/a';
	}
	try {
		$data = base64_decode(strrev($data));
		if (!preg_match('/^[0-9a-fA-F]+$/', $data)) {
			return 'Error: data contains non hexadecimal values!';
		}
		$data = pack("H".strlen($data), $data);
		$data = substr($data, 0, stripos($data, $pw));
		$pos = strpos($data, "|");
		if ($pos === false) {
		return "Error: CKSum not found!";
		}
		$crc = substr($data, 0, $pos);
		$value = trim(substr($data, $pos+1));
		if ($crc != sprintf('%u', crc32($value))) {
		return "Error; CKSum invalid!";
		}
		return $value;
	}
	catch (Exception $e) {
		return 'Error: '.$e->getMessage();
	}
}

function rm_cart_novalnet_encode($data, $pw) {
	$data = trim($data);
	if ($data == '') {
		return 'Error: no data!';
	}
	if (!function_exists('base64_encode') or !function_exists('pack') or !function_exists('crc32')) {
		return "Error: func 'base64_encode/pack/crc32 n/a'";
	}
	try {
		$crc = sprintf('%u', crc32($data));# %u ist obligatorisch f端r ccrc32, gibt einen vorzeichenbehafteten Wert zur端ck
		$data = $crc."|".$data;
		$data = bin2hex($data.$pw);
		$data = strrev(base64_encode($data));
	}
	catch (Exception $e){
		return 'Error: '.$e->getMessage();
	}
	return $data;
}

function rm_cart_novalnet_hashIt($h, $pw) {
	if (!$h) return 'Error: no data';
	if (!function_exists('md5')) {
		return 'Error: func md5 n/a';
	}
	if (is_array($h)) {
		return md5($h['auth_code'].$h['product_id'].$h['tariff'].$h['amount'].$h['test_mode'].$h['uniqid'].strrev($pw));
	}
	else {
		return 'Error: $h is not an array!';
	}
}

function rm_cart_novalnet_checkHash($request, $pw) {
	if (!$request) {
		return false;
	}
	if (is_array($request)){
		$h['auth_code'] = $request['auth_code'];
		$h['product_id'] = $request['product'];
		$h['tariff'] = $request['tariff'];
		$h['amount'] = $request['amount'];
		$h['test_mode'] = $request['test_mode'];
		$h['uniqid'] = $request['uniqid'];
	}
	if ($request['hash2'] != rm_cart_novalnet_hashIt($h, $pw)){
		return false;
	}
	return true;
}

function rm_cart_user_owns_order($order_number) {
    global $user;
    $order_items = rm_cart_get_order($order_number);
    $err = 0;
    if(!empty($order_items)) {
        foreach($order_items as $order_item) {
            if($order_item->uid != $user->uid) {
                $err++;
            }
        }
        if(!$err) return TRUE;
    }
}

function rm_cart_generate_order($order_number, $order_status, $item_title, $order_amount, $tu_amount, $tu_price, $tu_deposit, $tu_vat, $tu_packaging, $billing_name, $billing_street, $billing_zip, $billing_city, $shipping_name, $shipping_street, $shipping_zip, $shipping_city, $delivery_type, $pickup_spot, $delivery_range_from, $delivery_range_to, $payment_type, $iban, $expiration_date, $use_within, $leadtime, $gtin, $productunit_first, $productunit_second, $sku, $description, $offer_desc_reference, $offer_variation_reference, $trading_unit_reference, $seller_reference, $uid = NULL) {

    //Makes it possible to create orders for other users -> useful for support
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    else {
        $uid = 1;
    }
    $user = user_load($uid);
    
    //Create new node object
    $order_item = rm_api_create_new_node('order_item', $item_title, 'de', $user->uid, 1);
    
    //Add field values
    $order_item->field_item_type[LANGUAGE_NONE][0]['value'] = 'product';
    
    $order_item->field_order_number[LANGUAGE_NONE][0]['value'] = $order_number;
    $order_item->field_order_status[LANGUAGE_NONE][0]['value'] = $order_status;
    $order_item->field_order_amount[LANGUAGE_NONE][0]['value'] = $order_amount;
    
    $order_item->field_tu_amount[LANGUAGE_NONE][0]['value'] = $tu_amount;
    $order_item->field_tu_price[LANGUAGE_NONE][0]['value'] = $tu_price;
    $order_item->field_tu_deposit[LANGUAGE_NONE][0]['value'] = $tu_deposit;
    $order_item->field_tu_vat[LANGUAGE_NONE][0]['value'] = $tu_vat;
    $order_item->field_tu_packaging[LANGUAGE_NONE][0]['value'] = $tu_packaging;
    
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['name_line'] = $billing_name;
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['thoroughfare'] = $billing_street;
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['postal_code'] = $billing_zip;
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['locality'] = $billing_city;
    
    $order_item->field_address[LANGUAGE_NONE][0]['name_line'] = $shipping_name;
    $order_item->field_address[LANGUAGE_NONE][0]['thoroughfare'] = $shipping_street;
    $order_item->field_address[LANGUAGE_NONE][0]['postal_code'] = $shipping_zip;
    $order_item->field_address[LANGUAGE_NONE][0]['locality'] = $shipping_city;
    
    $order_item->field_deliverytype[LANGUAGE_NONE][0]['value'] = $delivery_type;
    
    $order_item->field_pickup_agreement_ref[LANGUAGE_NONE][0]['target_id'] = $pickup_spot;
    
    $order_item->field_delivery_range_from[LANGUAGE_NONE][0]['value'] = $delivery_range_from;
    $order_item->field_delivery_range_to[LANGUAGE_NONE][0]['value'] = $delivery_range_to;
    
    $order_item->field_paymenttype[LANGUAGE_NONE][0]['value'] = $payment_type;
    
    $order_item->field_iban[LANGUAGE_NONE][0]['value'] = $iban;
    
    $order_item->field_expiration_date[LANGUAGE_NONE][0]['value'] = $expiration_date;
    $order_item->field_use_within[LANGUAGE_NONE][0]['value'] = $use_within;
    $order_item->field_leadtime[LANGUAGE_NONE][0]['value'] = $leadtime;
    $order_item->field_gtin[LANGUAGE_NONE][0]['value'] = $gtin;
    $order_item->field_productunit[LANGUAGE_NONE][0]['first'] = $productunit_first;
    $order_item->field_productunit[LANGUAGE_NONE][0]['second'] = $productunit_second;
    $order_item->field_sku[LANGUAGE_NONE][0]['value'] = $sku;
    $order_item->body[LANGUAGE_NONE][0]['value'] = $description;
    
    $order_item->field_offer_desc_reference[LANGUAGE_NONE][0]['target_id'] = $offer_desc_reference;
    $order_item->field_offer_variation_reference[LANGUAGE_NONE][0]['target_id'] = $offer_variation_reference;
    $order_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id'] = $trading_unit_reference;
    
    $order_item->field_user_reference[LANGUAGE_NONE][0]['target_id'] = $seller_reference;
    
    node_save($order_item);
    
    return $order_item;
}

function rm_cart_generate_order_surcharge($order_number, $order_status, $item_title, $order_amount, $tu_price, $tu_vat, $billing_name, $billing_street, $billing_zip, $billing_city, $shipping_name, $shipping_street, $shipping_zip, $shipping_city, $payment_type, $iban, $description, $seller_reference, $uid = NULL) {

    //Makes it possible to create orders for other users -> useful for support
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    else {
        $uid = 1;
    }
    $user = user_load($uid);
    
    //Create new node object
    $order_item = rm_api_create_new_node('order_item', $item_title, 'de', $user->uid, 1);
    
    //Add field values
    $order_item->field_item_type[LANGUAGE_NONE][0]['value'] = 'surcharge';
    
    $order_item->field_order_number[LANGUAGE_NONE][0]['value'] = $order_number;
    $order_item->field_order_status[LANGUAGE_NONE][0]['value'] = $order_status;
    $order_item->field_order_amount[LANGUAGE_NONE][0]['value'] = $order_amount;
    
    $order_item->field_tu_price[LANGUAGE_NONE][0]['value'] = $tu_price;
    $order_item->field_tu_vat[LANGUAGE_NONE][0]['value'] = $tu_vat;
    
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['name_line'] = $billing_name;
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['thoroughfare'] = $billing_street;
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['postal_code'] = $billing_zip;
    $order_item->field_billingaddress[LANGUAGE_NONE][0]['locality'] = $billing_city;
    
    $order_item->field_address[LANGUAGE_NONE][0]['name_line'] = $shipping_name;
    $order_item->field_address[LANGUAGE_NONE][0]['thoroughfare'] = $shipping_street;
    $order_item->field_address[LANGUAGE_NONE][0]['postal_code'] = $shipping_zip;
    $order_item->field_address[LANGUAGE_NONE][0]['locality'] = $shipping_city;
    
    $order_item->field_paymenttype[LANGUAGE_NONE][0]['value'] = $payment_type;
    
    $order_item->field_iban[LANGUAGE_NONE][0]['value'] = $iban;
    
    $order_item->body[LANGUAGE_NONE][0]['value'] = $description;
    
    $order_item->field_user_reference[LANGUAGE_NONE][0]['target_id'] = $seller_reference;
    
    node_save($order_item);
    
    return $order_item;
}

function rm_cart_change_order_status($order_number, $new_status) {
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'order_item')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_order_number', 'value', $order_number)
        ->execute();
    if(isset($tmp['node'])) {
        $order_items = entity_load('node', array_keys($tmp['node']));
        foreach($order_items as $order_item) {
            $order_item->field_order_status[LANGUAGE_NONE][0]['value'] = $new_status;
            node_save($order_item);
        }
    }
}

function rm_cart_get_order($order_number) {
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'order_item')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_order_number', 'value', $order_number)
        ->propertyOrderBy('nid', 'DESC')
        ->execute();
    $order_items = array();
    if(isset($tmp['node'])) {
        $order_items = entity_load('node', array_keys($tmp['node']));
    }
    return $order_items;
}

function rm_cart_get_orders($uid, $header = NULL, $pager = NULL) {
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'order_item')
        ->propertyCondition('status', 1)
        ->propertyCondition('uid', $uid);
    if(!is_null($header)) $query->tableSort($header);
	if(!is_null($pager)) $query->pager($pager);
	$tmp = $query->execute();
    $order_items = array();
    if(isset($tmp['node'])) {
        $order_items = entity_load('node', array_keys($tmp['node']));
    }
    return $order_items;
}

function rm_cart_generate_order_number($uid, $suid, $timestamp) {
    $counter = 1;
    $newnumberfound = FALSE;
    while(!$newnumberfound) {
        $try_order_number = date('Ymd', $timestamp) . '-' . $suid . '-' . $uid . '-' . $counter;
        $query = new EntityFieldQuery();
        $tmp = $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'order_item')
            ->fieldCondition('field_order_number', 'value', $try_order_number)
            ->execute();
        if(empty($tmp['node'])) {
            $newnumberfound = TRUE;
        }
        else {
            $counter++;
        }
    }
    
    return $try_order_number;
}

function rm_cart_change_session_to_uid($old_session_id, $uid) {
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('cart_item'))
        ->propertyCondition('status', 1)
        ->fieldCondition('field_session_id', 'value', $old_session_id)
        ->execute();
    if(isset($tmp['node'])) {
        $cart_items = entity_load('node', array_keys($tmp['node']));
    }
    else {
        $cart_items = NULL;
    }
    if(!empty($cart_items)) {
        rm_cart_remove_from_cart_all($uid, FALSE);
        $new_session_id = session_id();
        foreach($cart_items as $cart_item) {
            $cart_item->uid = $uid;
            $cart_item->field_session_id[LANGUAGE_NONE][0]['value'] = $new_session_id;
            node_save($cart_item);
        }
    }
}

function rm_cart_get_one_click_setting($uid, $suid) {
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('one_click_setting'))
        ->propertyCondition('status', 1)
        ->propertyCondition('uid', $uid)
        ->fieldCondition('field_user_reference', 'target_id', $suid)
        ->execute();
    $one_click_settings = array();
    if(isset($tmp['node'])) {
        $tmpkeys = array_keys($tmp['node']);
        $one_click_settings = entity_load('node', $tmpkeys);
    }
    $one_click_setting = array();
    if(!empty($one_click_settings)) {
        $one_click_setting = $one_click_settings[$tmpkeys[0]];
    }
    return $one_click_setting;
}

function rm_cart_checkout_is_possible($account) {
    if(rm_cart_is_filled($account)) {
        //check if deliverytype is possible
        $minimum_order_values = array();
        $zipcode = NULL;
        if(isset($_SESSION['regionselect']['zip']) && !empty($_SESSION['regionselect']['zip'])) $zipcode = $_SESSION['regionselect']['zip'];
        $minimum_order_values = rm_cart_get_minimum_order_values($account->uid, $zipcode);
        $carttotal = rm_cart_get_cart_total($account->uid);
        if(isset($minimum_order_values)) {
            foreach($minimum_order_values as $type => $value) {
                foreach($value as $nid => $mov) {
                    if($carttotal >= $mov) return TRUE;
                }
            }
        }
    }
}

function rm_cart_is_filled($account) {
    $cart_items = rm_cart_get_cart($account->uid);
    if(!is_null($cart_items)) return TRUE;
}

function rm_cart_user_owns_cartitem($cart_id) {
    global $user;
    $cartobject = node_load($cart_id);
    if(!empty($cartobject) && $user->uid == $cartobject->uid) {
        return TRUE;
    }
}

function rm_cart_remove_from_cart($cart_id, $goto = TRUE) {
    $cartobject = node_load($cart_id);
    $cartobject->status = 0;
    node_save($cartobject);
    //Detect if request is ajax or not
    if(!rm_api_is_ajax() && $goto) drupal_set_message(t('The product was removed from your cart'), 'status');
    if(!rm_api_is_ajax() && $goto) drupal_goto();
}

function rm_cart_remove_from_cart_all($uid = NULL, $goto = TRUE) {
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('cart_item'))
        ->propertyCondition('status', 1);
    if(!is_null($uid)) {
        //Remove cart items of this user only
        $query->propertyCondition('uid', $uid);
    }
    else {
        //Don't limit to uids -> removes all cart items of all users
        //only for admins
        if(!rm_user_is_admin()) {
            drupal_set_message(t('Sorry, this is only allowed for admins'), 'error');
            drupal_access_denied();
        }
    }
    $tmp = $query->execute();
    $cartitems = array();
    if(isset($tmp['node'])) $cartitems = entity_load('node', array_keys($tmp['node']));
    if(!empty($cartitems)) {
        foreach($cartitems as $cartitem) {
            rm_cart_remove_from_cart($cartitem->nid, FALSE);
        }
    }
    if(!rm_api_is_ajax() && $goto) drupal_goto();
}

function rm_cart_add_to_cart($offer_description, $offer_variation, $trading_unit, $quantity = 1, $add = 0, $uid = NULL) {
    
    watchdog('rm_cart', print_r($offer_description, TRUE));
    watchdog('rm_cart', print_r($offer_variation, TRUE));
    watchdog('rm_cart', print_r($trading_unit, TRUE));
    watchdog('rm_cart', print_r($quantity, TRUE));
    watchdog('rm_cart', print_r($add, TRUE));
    watchdog('rm_cart', print_r($uid, TRUE));
    
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    
    //admins may also post uids to the path that triggers this function.
    //if this is the case, override any other uid that may have been provided or determined
    if(rm_user_is_admin()) {
        if(!empty($_POST['uid'])) $uid = $_POST['uid'];
    }
    
    //check if combination of references is valid
    $offer_description_object = node_load($offer_description);
    $valid = FALSE;
    foreach($offer_description_object->field_offer_variation_reference[LANGUAGE_NONE] as $variation) {
        if($variation['target_id'] == $offer_variation) {
            $offer_variation_object = node_load($offer_variation);
            foreach($offer_variation_object->field_trading_unit_reference[LANGUAGE_NONE] as $tradingunit) {
                if($tradingunit['target_id'] == $trading_unit) {
                    $valid = TRUE;
                    break;
                }
            }
            break;
        }
    }
    
    if($valid) {
    
        //check if a cart item for this variation and user already exists
        $query = new EntityFieldQuery();
        $tmp = $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', array('cart_item'))
            ->propertyCondition('status', 1)
            ->propertyCondition('uid', $uid)
            ->fieldCondition('field_session_id', 'value', session_id())
            ->fieldCondition('field_offer_desc_reference', 'target_id', $offer_description)
            ->fieldCondition('field_offer_variation_reference', 'target_id', $offer_variation)
            ->fieldCondition('field_trading_unit_reference', 'target_id', $trading_unit)
            ->execute();
        $existingitem = array();
        if(isset($tmp['node'])) {
            $cart_item_keys = array_keys($tmp['node']);
            $existingitem = entity_load('node', $cart_item_keys);
        }
        
        if(!empty($existingitem)) {
            //cart item already exists
            if($quantity == 0) {
                //quantity is set to zero, so remove cart item
                rm_cart_remove_from_cart($cart_item_keys[0]);
            }
            else {
                $cart_item = node_load($cart_item_keys[0]);
                //add new trading unit and new amount
                $cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id'] = $trading_unit;
                if($add) {
                    $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] += $quantity;
                }
                else {
                    $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] = $quantity;
                }
                node_save($cart_item);
            }
        }
        else {
            //cart item does not exist yet
            if($quantity == 0) {
                watchdog('rm_cart', 'cart items cannot have quantity 0');
            }
            else {
                $new_node = rm_api_create_new_node('cart_item', 'Warenkorb-Element ' . date('d.m.Y H:i:s'), 'de', $uid, 1);
                $new_node->field_offer_desc_reference[LANGUAGE_NONE][0]['target_id'] = $offer_description;
                $new_node->field_offer_variation_reference[LANGUAGE_NONE][0]['target_id'] = $offer_variation;
                $new_node->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id'] = $trading_unit;
                $new_node->field_quantity[LANGUAGE_NONE][0]['value'] = $quantity;
                $new_node->field_session_id[LANGUAGE_NONE][0]['value'] = session_id();
                $new_node->field_user_reference[LANGUAGE_NONE][0]['target_id'] = node_load($trading_unit)->uid;
                node_save($new_node);
            }
        }
        if(!rm_api_is_ajax()) drupal_set_message(t('The offer was added to your cart'), 'status');
    }
    else {
        if(!rm_api_is_ajax()) drupal_set_message(t('There was an error when adding the offer to your cart. Please contact us if this problem persists.'), 'error');
        $userobject = user_load($uid);
        watchdog('rm_cart', t('Validation error: User @user (@session) tried to add the following cart element: description @offer_description -> variation @offer_variation -> tu @trading_unit -> qty @quantity', array('@user' => format_username($userobject), '@session' => session_id(), '@offer_description' => $offer_description, '@offer_variation' => $offer_variation, '@trading_unit' => $trading_unit, '@quantity' => $quantity)));
    }
    if(!rm_api_is_ajax()) drupal_goto();
}

function rm_cart_get_minimum_order_values($seller_uid, $zipcode) {
    global $user;
    $shops = rm_shop_get_shop_agreements($user->uid, $zipcode, $seller_uid);
    $shop_ids = array_keys($shops);
    $movs = array();
    if(!empty($shops)) {
        foreach($shops[$shop_ids[0]]->agreements as $agreement_type => $user_reference) {
            foreach($user_reference as $user_id => $agreement_objects) {
                foreach($agreement_objects as $agreement_object) {
                    if(isset($agreement_object->field_minimum_order_value[LANGUAGE_NONE][0]['value'])) {
                        $movs[$agreement_type][$agreement_object->nid] = $agreement_object->field_minimum_order_value[LANGUAGE_NONE][0]['value'];
                    }
                }
            }
        }
    }
    return $movs;
}

function rm_cart_item_get_max_amount($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $variation = node_load($cart_item->field_offer_variation_reference[LANGUAGE_NONE][0]['target_id']);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    $maxamount = floor((!empty($variation->field_stock[LANGUAGE_NONE][0]['value'])) ? $variation->field_stock[LANGUAGE_NONE][0]['value'] : 0 / $trading_unit->field_tu_amount[LANGUAGE_NONE][0]['value']);
    return ($maxamount > 0) ? $maxamount : 999;
}

function rm_cart_get_item_total($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    return $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] * $trading_unit->field_tu_price[LANGUAGE_NONE][0]['value'];
}

function rm_cart_get_item_vat($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    $item_total = rm_cart_get_item_total($cart_item_id);
    return $item_total * $trading_unit->field_tu_vat[LANGUAGE_NONE][0]['value'] / 100;
}

function rm_cart_get_item_deposit($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    return $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] * $trading_unit->field_tu_deposit[LANGUAGE_NONE][0]['value'];
}

function rm_cart_get_cart_total($suid, $uid = NULL) {
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $cart_items = rm_cart_get_cart($suid, $uid);
    $total = 0;
    if(isset($cart_items)) {
        foreach($cart_items as $cart_item) {
            $total += rm_cart_get_item_total($cart_item->nid);
        }
    }
    return $total;
}

function rm_cart_get_cart_deposit($suid, $uid = NULL) {
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $cart_items = rm_cart_get_cart($suid, $uid);
    $total = 0;
    if(isset($cart_items)) {
        foreach($cart_items as $cart_item) {
            $total += rm_cart_get_item_deposit($cart_item->nid);
        }
    }
    return $total;
}

function rm_cart_get_cart_vat($suid, $uid = NULL) {
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $cart_items = rm_cart_get_cart($suid, $uid);
    $vat = 0;
    
    if(isset($cart_items)) {
        foreach($cart_items as $cart_item) {
            $vat += rm_cart_get_item_vat($cart_item->nid);
        }
    }
    return $vat;
}

function rm_cart_get_cart($suid, $uid = NULL) {
    
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    
    $session_id = session_id();
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('cart_item'))
        ->propertyCondition('status', 1);    
    if($uid) {
        $query->propertyCondition('uid', $uid);
    }
    else {
        $query->fieldCondition('field_session_id', 'value', $session_id);
    }
    $tmp = $query
        ->fieldCondition('field_user_reference', 'target_id', $suid)
        ->execute();
    if(isset($tmp['node'])) {
        $cart_items = entity_load('node', array_keys($tmp['node']));
    }
    else {
        $cart_items = NULL;
    }
    
    return $cart_items;
}

/**
* Implementation of hook_block_info().
*/
function rm_cart_block_info() {
    $blocks['rm_cart_block'] = array(
        'info' => t('Cart'), //The name that will appear in the block list.
        'cache' => DRUPAL_NO_CACHE, //Default
    );
    $blocks['rm_checkout_block'] = array(
        'info' => t('Checkout'), //The name that will appear in the block list.
        'cache' => DRUPAL_NO_CACHE, //Default
    );
    return $blocks;
}

/**
* Implementation of hook_block_view().
*/
function rm_cart_block_view($delta = '') {

    global $user;
    $suid = 0;
    if(!empty($_SESSION['chosen_seller'])) $suid = $_SESSION['chosen_seller'];
   
    switch($delta){
        
        case 'rm_cart_block':

			$block['subject'] = t('Your shopping cart');
			if(user_access('access content')) {
                
				$block['content'] = theme('rm_cart_theme_cart_block', array(
                                        'vars' => array(
                                            'cart' => rm_cart_get_cart($suid),
                                            'suid' => $suid,
                                        ),
                                    ));
			}

			return $block;
            
        case 'rm_checkout_block':

			$block['subject'] = t('Your checkout summary');
			if(user_access('access content')) {
            
				$block['content'] = theme('rm_cart_theme_checkout_block', array(
                                        'vars' => array(
                                            'cart' => rm_cart_get_cart($suid),
                                            'suid' => $suid,
                                            'oneclick' => rm_cart_get_one_click_setting($user->uid, $suid),
                                        ),
                                    ));
			}

			return $block;
    }
}

function rm_cart_theme() {
	return array(
		'rm_cart_theme_cart_block' => array(
			'template' => 'rm_cart_cart_block_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
		'rm_cart_theme_checkout_block' => array(
			'template' => 'rm_cart_checkout_block_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
		'rm_cart_checkout' => array(
			'template' => 'rm_cart_checkout_theme',
            'arguments' => array('form' => 'form'),
			'render element' => 'form',
		),
		'rm_cart_checkout_confirm' => array(
			'template' => 'rm_cart_checkout_confirm_theme',
            'arguments' => array('form' => 'form'),
			'render element' => 'form',
		),
	);
}