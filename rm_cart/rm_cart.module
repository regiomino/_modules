<?php

/**
* Implements hook_menu().
*/
function rm_cart_menu() {
	$items = array();

    $items['addtocart/%/%/%/%/%'] = array(
        'page callback' => 'rm_cart_add_to_cart',
        'page arguments' => array(1,2,3,4,5),
        'access arguments' => array('access content'),
	);
    $items['removefromcart/%'] = array(
        'page callback' => 'rm_cart_remove_from_cart',
        'page arguments' => array(1),
        'access callback' => 'rm_cart_user_owns_cartitem',
        'access arguments' => array(1),
	);
    $items['checkout/%user'] = array(
        'title' => 'Checkout',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_cart_checkout', 1),
        'access callback' => 'rm_cart_is_filled',
        'access arguments' => array(1),
        'file' => 'rm_cart.inc',
        'file path' => drupal_get_path('module', 'rm_cart'),
    );
    
	return $items;
}

function rm_cart_is_filled($suid) {
    $cart_items = rm_cart_get_cart($suid);
    if(!is_null($cart_items)) return TRUE;
}

function rm_cart_user_owns_cartitem($cart_id) {
    global $user;
    $cartobject = node_load($cart_id);
    if(!empty($cartobject) && $user->uid == $cartobject->uid) {
        return TRUE;
    }
}

function rm_cart_remove_from_cart($cart_id, $goto = TRUE) {
    $cartobject = node_load($cart_id);
    $cartobject->status = 0;
    node_save($cartobject);
    //Detect if request is ajax or not
    if(!rm_api_is_ajax() && $goto) drupal_set_message(t('The product was removed from your cart'), 'status');
    if(!rm_api_is_ajax() && $goto) drupal_goto();
}

function rm_cart_remove_from_cart_all($uid = NULL) {
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('cart_item'))
        ->propertyCondition('status', 1);
    if(!is_null($uid)) {
        //Remove cart items of this user only
        $query->propertyCondition('uid', $uid);
    }
    else {
        //Don't limit to uids -> removes all cart items of all users
        //only for admins
        if(!rm_user_is_admin()) {
            drupal_set_message(t('Sorry, this is only allowed for admins'), 'error');
            drupal_access_denied();
        }
    }
    $tmp = $query->execute();
    $cartitems = array();
    if(isset($tmp['node'])) $cartitems = entity_load('node', array_keys($tmp['node']));
    if(!empty($cartitems)) {
        foreach($cartitems as $cartitem) {
            rm_cart_remove_from_cart($cartitem->nid, FALSE);
        }
    }
    drupal_goto();
}

function rm_cart_remove_from_cart_unfit($suid) {

}

function rm_cart_add_to_cart($offer_description, $offer_variation, $trading_unit, $quantity = 1, $add = 0, $uid = NULL) {
    
    watchdog('rm_cart', print_r($offer_description, TRUE));
    watchdog('rm_cart', print_r($offer_variation, TRUE));
    watchdog('rm_cart', print_r($trading_unit, TRUE));
    watchdog('rm_cart', print_r($quantity, TRUE));
    watchdog('rm_cart', print_r($add, TRUE));
    watchdog('rm_cart', print_r($uid, TRUE));
    
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    
    //admins may also post uids to the path that triggers this function.
    //if this is the case, override any other uid that may have been provided or determined
    if(rm_user_is_admin()) {
        if(!empty($_POST['uid'])) $uid = $_POST['uid'];
    }
    
    //check if combination of references is valid
    $offer_description_object = node_load($offer_description);
    $valid = FALSE;
    foreach($offer_description_object->field_offer_variation_reference[LANGUAGE_NONE] as $variation) {
        if($variation['target_id'] == $offer_variation) {
            $offer_variation_object = node_load($offer_variation);
            foreach($offer_variation_object->field_trading_unit_reference[LANGUAGE_NONE] as $tradingunit) {
                if($tradingunit['target_id'] == $trading_unit) {
                    $valid = TRUE;
                    break;
                }
            }
            break;
        }
    }
    
    if($valid) {
    
        //check if a cart item for this variation and user already exists
        $query = new EntityFieldQuery();
        $tmp = $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', array('cart_item'))
            ->propertyCondition('status', 1)
            ->propertyCondition('uid', $uid)
            ->fieldCondition('field_session_id', 'value', session_id())
            ->fieldCondition('field_offer_desc_reference', 'target_id', $offer_description)
            ->fieldCondition('field_offer_variation_reference', 'target_id', $offer_variation)
            ->fieldCondition('field_trading_unit_reference', 'target_id', $trading_unit)
            ->execute();
        $existingitem = array();
        if(isset($tmp['node'])) {
            $cart_item_keys = array_keys($tmp['node']);
            $existingitem = entity_load('node', $cart_item_keys);
        }
        
        if(!empty($existingitem)) {
            //cart item already exists
            if($quantity == 0) {
                //quantity is set to zero, so remove cart item
                rm_cart_remove_from_cart($cart_item_keys[0]);
            }
            else {
                $cart_item = node_load($cart_item_keys[0]);
                //add new trading unit and new amount
                $cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id'] = $trading_unit;
                if($add) {
                    $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] += $quantity;
                }
                else {
                    $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] = $quantity;
                }
                node_save($cart_item);
            }
        }
        else {
            //cart item does not exist yet
            if($quantity == 0) {
                watchdog('rm_cart', 'cart items cannot have quantity 0');
            }
            else {
                $new_node = rm_api_create_new_node('cart_item', 'Warenkorb-Element ' . date('d.m.Y H:i:s'), 'de', $uid, 1);
                $new_node->field_offer_desc_reference[LANGUAGE_NONE][0]['target_id'] = $offer_description;
                $new_node->field_offer_variation_reference[LANGUAGE_NONE][0]['target_id'] = $offer_variation;
                $new_node->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id'] = $trading_unit;
                $new_node->field_quantity[LANGUAGE_NONE][0]['value'] = $quantity;
                $new_node->field_session_id[LANGUAGE_NONE][0]['value'] = session_id();
                $new_node->field_user_reference[LANGUAGE_NONE][0]['target_id'] = node_load($trading_unit)->uid;
                node_save($new_node);
            }
        }
        if(!rm_api_is_ajax()) drupal_set_message(t('The offer was added to your cart'), 'status');
    }
    else {
        if(!rm_api_is_ajax()) drupal_set_message(t('There was an error when adding the offer to your cart. Please contact us if this problem persists.'), 'error');
        $userobject = user_load($uid);
        watchdog('rm_cart', t('Validation error: User @user (@session) tried to add the following cart element: description @offer_description -> variation @offer_variation -> tu @trading_unit -> qty @quantity', array('@user' => format_username($userobject), '@session' => session_id(), '@offer_description' => $offer_description, '@offer_variation' => $offer_variation, '@trading_unit' => $trading_unit, '@quantity' => $quantity)));
    }
    if(!rm_api_is_ajax()) drupal_goto();
}

function rm_cart_get_minimum_order_values($seller_uid, $zipcode) {
    global $user;
    $shops = rm_shop_get_shop_agreements($user->uid, $zipcode, $seller_uid);
    $shop_ids = array_keys($shops);
    $movs = array();
    if(!empty($shops)) {
        foreach($shops[$shop_ids[0]]->agreements as $agreement_type => $user_reference) {
            foreach($user_reference as $user_id => $agreement_object) {
                if(isset($agreement_object[0]->field_minimum_order_value[LANGUAGE_NONE][0]['value'])) {
                    $movs[$agreement_type] = $agreement_object[0]->field_minimum_order_value[LANGUAGE_NONE][0]['value'];
                }
            }
        }
    }
    return $movs;
}

function rm_cart_item_get_max_amount($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $variation = node_load($cart_item->field_offer_variation_reference[LANGUAGE_NONE][0]['target_id']);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    $maxamount = floor((!empty($variation->field_stock[LANGUAGE_NONE][0]['value'])) ? $variation->field_stock[LANGUAGE_NONE][0]['value'] : 0 / $trading_unit->field_tu_amount[LANGUAGE_NONE][0]['value']);
    return ($maxamount > 0) ? $maxamount : 999;
}

function rm_cart_get_item_total($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    return $cart_item->field_quantity[LANGUAGE_NONE][0]['value'] * $trading_unit->field_tu_price[LANGUAGE_NONE][0]['value'];
}

function rm_cart_get_item_vat($cart_item_id) {
    $cart_item = node_load($cart_item_id);
    $trading_unit = node_load($cart_item->field_trading_unit_reference[LANGUAGE_NONE][0]['target_id']);
    $item_total = rm_cart_get_item_total($cart_item_id);
    return $item_total * $trading_unit->field_tu_vat[LANGUAGE_NONE][0]['value'] / 100;
}

function rm_cart_get_cart_total($suid, $uid = NULL) {
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $cart_items = rm_cart_get_cart($suid, $uid);
    $total = 0;
    if(isset($cart_items)) {
        foreach($cart_items as $cart_item) {
            $total += rm_cart_get_item_total($cart_item->nid);
        }
    }
    return $total;
}

function rm_cart_get_cart_vat($suid, $uid = NULL) {
    //If no uid is provided, use the one of the current user
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $cart_items = rm_cart_get_cart($suid, $uid);
    $vat = 0;
    
    if(isset($cart_items)) {
        foreach($cart_items as $cart_item) {
            $vat += rm_cart_get_item_vat($cart_item->nid);
        }
    }
    return $vat;
}

function rm_cart_get_cart($suid, $uid = NULL) {
    
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    
    $session_id = session_id();
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('cart_item'))
        ->propertyCondition('status', 1)
        ->propertyCondition('uid', $uid)
        ->fieldCondition('field_session_id', 'value', $session_id)
        ->fieldCondition('field_user_reference', 'target_id', $suid)
        ->execute();
    if(isset($tmp['node'])) {
        $cart_items = entity_load('node', array_keys($tmp['node']));
    }
    else {
        $cart_items = NULL;
    }
    
    return $cart_items;
}

/**
* Implementation of hook_block_info().
*/
function rm_cart_block_info() {
    $blocks['rm_cart_block'] = array(
        'info' => t('Cart'), //The name that will appear in the block list.
        'cache' => DRUPAL_NO_CACHE, //Default
    );
    return $blocks;
}

/**
* Implementation of hook_block_view().
*/
function rm_cart_block_view($delta = '') {
    switch($delta){
        
        case 'rm_cart_block':

			$block['subject'] = t('Your shopping cart');
			if(user_access('access content')) {
            
                $suid = 0;
                if(!empty($_SESSION['chosen_seller'])) $suid = $_SESSION['chosen_seller'];
                
				$block['content'] = theme('rm_cart_theme_cart_block', array(
															'vars' => array(
																'cart' => rm_cart_get_cart($suid),
															),
														));
			}

			return $block;
    }
}

function rm_cart_theme() {
	return array(
		'rm_cart_theme_cart_block' => array(
			'template' => 'rm_cart_cart_block_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
	);
}