<?php

function rm_shop_init() {

// $item_type = 'product'; //could be "surcharge"
// $now = time();
// $order_number = rm_cart_generate_order_number(1, 44, $now);
// $oder_status = 'pending';
// $order_amount = 2;
// $tu_amount = 1;
// $tu_price = 4.34;
// $tu_deposit = 1;
// $tu_vat = 10.7;
// $tu_packaging = 'crate';
// $expiration_date = 122324324;
// $use_within = 7;
// $leadtime = 3;
// $gtin = 'EAN-782767';
// $productunit_first = 1;
// $productunit_second = 'pc';
// $sku = '44-BGDH-2';
// $description = 'Super Produkt';
// $offer_desc_reference = 7563;
// $offer_variation_reference = 7562;
// $trading_unit_reference = 7561;
// $seller_reference = 44;

// rm_cart_generate_order(
    // $item_type,
    // $order_number,    
    // $oder_status,
    // $order_amount,
    // $tu_amount,
    // $tu_price,
    // $tu_deposit,
    // $tu_vat,
    // $tu_packaging,
    // $expiration_date,
    // $use_within,
    // $leadtime,
    // $gtin,
    // $productunit_first,
    // $productunit_second,
    // $sku,
    // $description,
    // $offer_desc_reference,
    // $offer_variation_reference,
    // $trading_unit_reference,
    // $seller_reference);
    
    //rm_cart_change_order_status('20141001-44-1', 'completed');

    // $nodes = rm_api_get_nodes_by_properties(array('seller_profile', 'customer_profile'));
    
    // foreach($nodes as $nid => $node) {
        // $node->field_next_action[LANGUAGE_NONE][0]['value'] = 1924988399;
        // node_save($node);
    // }
    
    // $query = new EntityFieldQuery();
    // $tmp = $query
        // ->entityCondition('entity_type', 'node')
        // ->entityCondition('bundle', array('seller_profile', 'customer_profile'))
        // ->propertyCondition('status', 0)
        // ->fieldCondition('field_salesguy', 'target_id', 1)
        // ->execute();
    // $allnodes = entity_load('node', array_keys($tmp['node']));
    // foreach($allnodes as $nid => $nodeobject) {
        // unset($nodeobject->field_salesguy[LANGUAGE_NONE]);
        // $nodeobject->sticky = 0;
        // node_save($nodeobject);
    // }
    
    
    // $ntqry = new EntityFieldQuery();
    // $nttmp = $ntqry
        // ->entityCondition('entity_type', 'node')
        // ->entityCondition('bundle', 'note')
        // ->execute();
    // $allnotes = array();
    // if(isset($nttmp['node'])) $allnotes = entity_load('node', array_keys($nttmp['node']));
    // $notes = '';
    
    // if(!empty($allnotes)) {
        // foreach($allnotes as $noteobject) {
            // $noteobject->body[LANGUAGE_NONE][0]['value'] = $noteobject->title;
            // node_save($noteobject);
        // }
    // }
    
    drupal_add_js('https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&sensor=false', 'external');
    
    global $base_url;
    if(drupal_is_front_page() && strpos($_SERVER['HTTP_REFERER'],$base_url) === FALSE && empty($_SESSION['messages'])) {
        global $user;
        if($user->uid > 0) {
            $userobject = rm_user_address_complete($user->uid);
            if($userobject) {
                if(isset($userobject->field_first_name[LANGUAGE_NONE][0]['value']) && !empty($userobject->field_first_name[LANGUAGE_NONE][0]['value']) && isset($userobject->field_last_name[LANGUAGE_NONE][0]['value']) && !empty($userobject->field_last_name[LANGUAGE_NONE][0]['value'])) {
                    $name = $userobject->field_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $userobject->field_last_name[LANGUAGE_NONE][0]['value'];
                }
                else {
                    $userobject = $account->mail;
                }
                drupal_set_message(t('Welcome back @username. Here are all the available vendors for your last location in @street, @zip @city. If you would like to enter a different address, please <a href="@url">click here</a>.', array('@street' => $userobject->field_address[LANGUAGE_NONE][0]['thoroughfare'], '@username' => $name, '@zip' => $userobject->field_address[LANGUAGE_NONE][0]['postal_code'], '@city' => $userobject->field_address[LANGUAGE_NONE][0]['locality'], '@url' => url())));
                
                drupal_goto('lieferanten/' . $userobject->field_address[LANGUAGE_NONE][0]['locality'] . '/' . $userobject->field_address[LANGUAGE_NONE][0]['postal_code'] . '/' . $userobject->field_address[LANGUAGE_NONE][0]['thoroughfare']);
                
            }
        }
    }
}

function rm_shop_node_access($node, $op, $account) {
    if($op == 'view') {
        if(!rm_user_is_admin()) {
            switch($node->type) {
                case 'payment_agreement':
                case 'dispatch_agreement':
                case 'pickup_agreement':
                case 'commission_agreement':
                case 'shipping_agreement':
                case 'transactions_sales':
                case 'transactions_purchase':
                case 'note':
                case 'trading_unit':
                case 'fax':
                case 'offer_variation':
                case 'offer_description':
                case 'offer_table':
                case 'activity_log':
                case 'cart_item':
                case 'one_click_setting':
                    return NODE_ACCESS_DENY;
            }
        }
    }
}

function rm_shop_trusted_shops_badge() {
    $output = '';
    if(arg(0) != 'manage') {
        $output = "
            <script>
                (function () {
                    var _tsid = 'X9FF4FD2592B5BFA727E6480148224623';
                    _tsConfig = {
                            'yOffset': '0', //offset from page bottom
                            'variant': 'reviews' //text, default, small, reviews
                    };
                    var _ts = document.createElement('script');
                    _ts.type = 'text/javascript';
                    _ts.charset = 'utf-8';
                    _ts.src = '//widgets.trustedshops.com/js/' + _tsid + '.js';
                    var __ts = document.getElementsByTagName('script')[0];
                    __ts.parentNode.insertBefore(_ts, __ts);
                })();
            </script>
        ";
    }
    return $output;
}

/**
* Implements hook_mollom_form_list().
*/
function rm_shop_mollom_form_list() {
  $forms['rm_shop_contact_form'] = array(
    'title' => t('Get in touch form'),
  );
  return $forms;
}
/**
* Implements hook_mollom_form_info().
*/
function rm_shop_mollom_form_info() {
  $form_info = array(
    'mode' => MOLLOM_MODE_CAPTCHA,
  );
  return $form_info;
}

/**
 * Implements hook_menu().
 */
function rm_shop_menu() {
    $items = array();
    $items['rm-shop-participantxml'] = array(
        'page callback' => 'rm_shop_get_participantxml',
        'access arguments' => array('access content'),
    );
    $items['rm-shop-spotxml/%'] = array(
        'page callback' => 'rm_shop_get_spotxml',
        'page arguments' => array(1),
        'access arguments' => array('access content'),
    );
    $items['lieferanten/%/%/%'] = array(
        'title' => 'Vendors in your region',
        'title callback' => 'rm_shop_get_shops_title',
        'title arguments' => array(1),
        'type' => MENU_NORMAL_ITEM,
        'access callback' => 'rm_shop_validate_address',
        'access arguments' => array(1,2,3),
        'page callback' => 'rm_shop_get_shops',
        'page arguments' => array(1,2,3),
        'file' => 'rm_shop.inc',
        'file path' => drupal_get_path('module', 'rm_shop'),
    );
    $items['kontakt'] = array(
        'title' => 'Help & Contact',
        'page callback' => 'rm_shop_get_in_touch',
        'access arguments' => array('access content'),
        'file' => 'rm_shop.inc',
        'file path' => drupal_get_path('module', 'rm_shop'),
    );
    $items['jobs'] = array(
        'title' => 'Jobs',
        'page callback' => 'rm_shop_jobs',
        'access arguments' => array('access content'),
        'file' => 'rm_shop.inc',
        'file path' => drupal_get_path('module', 'rm_shop'),
    );
    $items['vorschlagen'] = array(
        'title' => 'Vorschlagen',
        'page callback' => 'rm_shop_suggest',
        'access arguments' => array('access content'),
        'file' => 'rm_shop.inc',
        'file path' => drupal_get_path('module', 'rm_shop'),
    );
    $items['sitemap'] = array(
        'title' => 'Sitemap',
        'page callback' => 'rm_shop_sitemap',
        'access arguments' => array('access content'),
        'file' => 'rm_shop.inc',
        'file path' => drupal_get_path('module', 'rm_shop'),
    );
    
    $items['admin/config/rmshop'] = array(
        'title' => 'Regiomino Shop',
        'description' => 'Regiomino admin settings',
        'position' => 'left',
        'weight' => -100,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer site configuration'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );
	$items['admin/config/rmshop/cartpreservation'] = array(
        'title' => 'Regiomino cart preservation',
        'description' => 'Set the cart preservation.',
        'page callback' => 'drupal_get_form', // function called when path is requested
        'page arguments' => array('rm_shop_admin_cart_preservation'), // form id passed to the function
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'rm_shop.admin.inc', // look for a function describing this form in this file
        'file path' => drupal_get_path('module', 'rm_shop'),
    );
	$items['admin/config/rmshop/cartremove'] = array(
        'title' => 'Remove all cart items',
        'description' => 'Remove all active cart items.',
        'page callback' => 'rm_cart_remove_from_cart_all', // function called when path is requested
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'rm_cart.module', // look for a function describing this form in this file
        'file path' => drupal_get_path('module', 'rm_cart'),
    );
    return $items;
}

function rm_shop_get_commission($user_id, $seller_id) {
    //Get all shipping agreements that match the given zipcode
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('commission_agreement'))
        ->propertyCondition('status', 1)
        ->propertyCondition('uid', $seller_id)
        ->fieldCondition('field_user_reference', 'target_id', ($user_id > 0) ? array(0, $user_id) : $user_id)
        ->execute();
    $allagreements = array();
    if(isset($tmp['node'])) $allagreements = entity_load('node', array_keys($tmp['node']));
    //Extract all uids from agreements
    $alluids = array();
    if(!empty($allagreements)) {
        foreach($allagreements as $agreementobject) {
            //if an agreement from the same seller of the same type already exists, then check if the current one is more specific or more general
            if(!empty($alluids[$agreementobject->uid][$agreementobject->type])) {
                //step through the existing entries -> should be only one
                foreach($alluids[$agreementobject->uid][$agreementobject->type] as $user_reference_key => $unimportant) {
                    //if the already written key is smaller than the current one, this means the current one is more specific
                    if($user_reference_key < $agreementobject->field_user_reference[LANGUAGE_NONE][0]['target_id']) {
                        //delete the more general one
                        unset($alluids[$agreementobject->uid][$agreementobject->type][$user_reference_key]);
                    }
                }
            }
            //write the current key
            $alluids[$agreementobject->uid][$agreementobject->type][$agreementobject->field_user_reference[LANGUAGE_NONE][0]['target_id']][] = $agreementobject;
        }
    }
    $thecommission = 0;
    if(!empty($allagreements)) {
        foreach($alluids[$seller_id]['commission_agreement'] as $user_reference_key => $agreements) {
            foreach($agreements as $agreement) {
                $thecommission = $agreement->field_commission[LANGUAGE_NONE][0]['value'];
            }
        }
    }
    return $thecommission;
}

function rm_shop_get_shop_agreements($user_id, $zipcode, $seller_id = NULL) {

    if(isset($zipcode) && !empty($zipcode)) {
        //Get all shipping agreements that match the given zipcode
        $query = new EntityFieldQuery();
        $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', array('shipping_agreement'))
            ->propertyCondition('status', 1);
        if(!is_null($seller_id)) $query->propertyCondition('uid', $seller_id);   
        $tmp = $query
            ->fieldCondition('field_shipping_zipcodes', 'value', $zipcode)
            ->fieldCondition('field_user_reference', 'target_id', ($user_id > 0) ? array(0, $user_id) : $user_id)
            ->execute();
    }
    $shippingagreements = array();
    if(isset($tmp['node'])) $shippingagreements = entity_load('node', array_keys($tmp['node']));

    //Get all dispatch, pickup and payment agreements
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('dispatch_agreement', 'pickup_agreement', 'payment_agreement'))
        ->propertyCondition('status', 1);
    if(!is_null($seller_id)) $query->propertyCondition('uid', $seller_id);
    $tmp = $query
        ->fieldCondition('field_user_reference', 'target_id', ($user_id > 0) ? array(0, $user_id) : $user_id)
        ->execute();

    $otheragreements = entity_load('node', array_keys($tmp['node']));

    //Merge all
    $allagreements = array_merge($otheragreements, $shippingagreements);

    //Extract all uids from agreements
    $alluids = array();
    foreach($allagreements as $agreementobject) {
        //if an agreement from the same seller of the same type already exists, then check if the current one is more specific or more general
        if(!empty($alluids[$agreementobject->uid][$agreementobject->type])) {
            //step through the existing entries -> should be only one
            foreach($alluids[$agreementobject->uid][$agreementobject->type] as $user_reference_key => $unimportant) {
                //if the already written key is smaller than the current one, this means the current one is more specific
                if($user_reference_key < $agreementobject->field_user_reference[LANGUAGE_NONE][0]['target_id']) {
                    //delete the more general one
                    unset($alluids[$agreementobject->uid][$agreementobject->type][$user_reference_key]);
                }
            }
        }
        //write the current key
        $alluids[$agreementobject->uid][$agreementobject->type][$agreementobject->field_user_reference[LANGUAGE_NONE][0]['target_id']][] = $agreementobject;
    }
    
    $shops = array();
    
    if(!empty($alluids)) {
        //Filter out all uids that do not have active trading units
        $alluidkeys = array_keys($alluids);
        $relevantuids = rm_shop_filter_sellers_ready_to_sell($alluidkeys);
        
        //then select all seller profiles that match the relevant uids
        if(!empty($relevantuids)) {
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node');
            $query->entityCondition('bundle', array('seller_profile'));
            $query->propertyCondition('status', 1);
            $query->propertyCondition('uid', $relevantuids);
            $query->pager(15);
            $result = $query->execute();
            if(isset($result['node'])) {
                $shops = entity_load('node', array_keys($result['node']));
            }
        }
    }
    //add all agreement infos to the shop profile
    foreach($shops as $nid => $shop) {
        $shops[$nid]->agreements = $alluids[$shop->uid];
    }
    
    return $shops;
}

function rm_shop_filter_sellers_ready_to_sell($uids) {

    //first filter out sellers that have no active offers
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', array('offer_description'));
    $query->propertyCondition('status', 1);
    $query->propertyCondition('uid', $uids);
    $result = $query->execute();

    $intersecting_uids = array();
    
    if(isset($result['node'])) {
        $offer_description_owners = array();
        $all_offer_descriptions = entity_load('node', array_keys($result['node']));
        foreach($all_offer_descriptions as $nid => $offer_description_object) {
            $offer_description_owners[$offer_description_object->uid] = TRUE;
        }
        $tmp = array_intersect(array_keys($offer_description_owners), $uids);
        
        $intersecting_uids = array_values($tmp);
    }
    
    //then filter out sellers that have no payment agreement  
    if(!empty($intersecting_uids)) {  
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node');
        $query->entityCondition('bundle', array('payment_agreement'));
        $query->propertyCondition('status', 1);
        $query->propertyCondition('uid', $intersecting_uids);
        $result = $query->execute();
    }
    
    $intersecting_uids_two = array();
    
    if(isset($result['node'])) {
        $payment_agreement_owners = array();
        $all_payment_agreements = entity_load('node', array_keys($result['node']));
        foreach($all_payment_agreements as $nid => $payment_agreement_object) {
            $payment_agreement_owners[$payment_agreement_object->uid] = TRUE;
        }
        $tmp = array_intersect(array_keys($payment_agreement_owners), $intersecting_uids);
        
        $intersecting_uids_two = array_values($tmp);
    }
    
    //then filter out sellers that have no delivery agreement
    if(!empty($intersecting_uids_two)) {      
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node');
        $query->entityCondition('bundle', array('shipping_agreement', 'dispatch_agreement', 'pickup_agreement'));
        $query->propertyCondition('status', 1);
        $query->propertyCondition('uid', $intersecting_uids_two);
        $result = $query->execute();
    }
    
    $intersecting_uids_three = array();
    
    if(isset($result['node'])) {
        $delivery_agreement_owners = array();
        $all_delivery_agreements = entity_load('node', array_keys($result['node']));
        foreach($all_delivery_agreements as $nid => $delivery_agreement_object) {
            $delivery_agreement_owners[$delivery_agreement_object->uid] = TRUE;
        }
        $tmp = array_intersect(array_keys($delivery_agreement_owners), $intersecting_uids_two);
        
        $intersecting_uids_three = array_values($tmp);
    }
    
    //then filter out sellers that have no commission agreement
    if(!empty($intersecting_uids_three)) {      
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node');
        $query->entityCondition('bundle', array('commission_agreement'));
        $query->propertyCondition('status', 1);
        $query->propertyCondition('uid', $intersecting_uids_three);
        $result = $query->execute();
    }
    
    $intersecting_uids_four = array();
    
    if(isset($result['node'])) {
        $commission_agreement_owners = array();
        $all_commission_agreements = entity_load('node', array_keys($result['node']));
        foreach($all_commission_agreements as $nid => $commission_agreement_object) {
            $commission_agreement_owners[$commission_agreement_object->uid] = TRUE;
        }
        $tmp = array_intersect(array_keys($commission_agreement_owners), $intersecting_uids_three);
        
        $intersecting_uids_four = array_values($tmp);
    }
    
    
    return $intersecting_uids_four;
}

function rm_shop_get_structured_seller_offers($uid, $status = 1) {
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('offer_description', 'offer_variation', 'trading_unit'))
        ->propertyCondition('status', $status)
        ->propertyCondition('uid', $uid)
        ->execute();
    $alloffers = array();
    if(isset($tmp['node'])) $alloffers = entity_load('node', array_keys($tmp['node']));
    $offers = array();
    foreach($alloffers as $nid => $offerobject) {
        if($offerobject->type == 'offer_description') $offers[$nid] = $offerobject;
    }
    foreach($offers as $nid => $offer_description) {
        foreach($offer_description->field_offer_variation_reference[LANGUAGE_NONE] as $delta => $offer_variation) {
            $offers[$nid]->offer_variations[$delta] = $alloffers[$offer_variation['target_id']];
        }
        foreach($offers[$nid]->offer_variations as $delta => $offer_variation) {
            foreach($offer_variation->field_trading_unit_reference[LANGUAGE_NONE] as $deltaa => $trading_unit) {
                $offers[$nid]->offer_variations[$delta]->trading_units[$deltaa] = $alloffers[$trading_unit['target_id']];
            }
        }
    }
    return $offers;
}

function rm_shop_sort_agreements_by_mov($a, $b) {
    if ($a->field_minimum_order_value[LANGUAGE_NONE][0]['value'] == $b->field_minimum_order_value[LANGUAGE_NONE][0]['value']) {
        return 0;
    }
    return ($a->field_minimum_order_value[LANGUAGE_NONE][0]['value'] < $b->field_minimum_order_value[LANGUAGE_NONE][0]['value']) ? -1 : 1;
}

function rm_shop_get_shops_title($arg) {
    return t('Vendors in @region', array('@region' => $arg));
}

function rm_shop_get_shop($suid) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->entityCondition('bundle', array('seller_profile'));
    $query->propertyCondition('status', 1);
    $query->propertyCondition('uid', $suid);
    $result = $query->execute();
    $shop = array();
    if(isset($result['node'])) {
        $shop_keys = array_keys($result['node']);
        $shop = node_load($shop_keys[0]);
    }
    return $shop;
}

function rm_shop_validate_address($city, $zipcode, $street) {
    if(empty($city) || empty($zipcode) || empty($street)) return FALSE;
    $result = rm_api_google_address_check($street, $zipcode, $city);
    $valid = rm_api_validate_google_address($result);
    if(!empty($valid)) {
        drupal_set_message($valid[0], 'error');
        drupal_goto();
    }
    else {
        $_SESSION['gmapsdata'] = $result;
        return TRUE;
    }
}

/**
 * Implements hook_theme().
 */
function rm_shop_theme() {
	return array(
		'rm_shop_theme_entry_header' => array(
			'template' => 'rm_shop_entry_header_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
		'rm_shop_theme_smart_entry_header' => array(
			'template' => 'rm_shop_smart_entry_header_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
        'rm_shop_theme_get_in_touch' => array(
            'template' => 'rm_shop_get_in_touch_theme',
            'variables' => array(
                'vars' => NULL,
            )
        ),
        'rm_shop_theme_jobs' => array(
            'template' => 'rm_shop_jobs_theme',
            'variables' => array(
                'vars' => NULL,
            )
        ),
        'rm_shop_theme_shops' => array(
            'template' => 'rm_shop_shops_theme',
            'variables' => array(
                'vars' => NULL,
            )
        ),
        'rm_shop_theme_sitemap' => array(
            'template' => 'rm_shop_sitemap_theme',
            'variables' => array(
                'vars' => NULL,
            )
        ),
	);
}

/**
* Implementation of hook_block_info().
*/
function rm_shop_block_info() {
	$blocks['regiomino_entry_header'] = array(
        'info' => t('Regiomino Entry Header'), //The name that will appear in the block list.
        'cache' => DRUPAL_NO_CACHE, //Default
    );
	$blocks['regiomino_smart_entry_header'] = array(
        'info' => t('Regiomino Smart Entry Header'), //The name that will appear in the block list.
        'cache' => DRUPAL_NO_CACHE, //Default
    );
    return $blocks;
}

/**
* Implementation of hook_block_view().
*/
function rm_shop_block_view($delta = '') {
  switch($delta){		
		case 'regiomino_entry_header':
			$block['subject'] = '';
			if(user_access('access content')) {
                $regionselect = drupal_get_form('rm_shop_regionselect');
				$block['content'] = theme('rm_shop_theme_entry_header', array(
                    'vars' => array(
                        'regionselect' => $regionselect,
                    ),
                ));
			}
			return $block;
        case 'regiomino_smart_entry_header':
			$block['subject'] = '';
			if(user_access('access content')) {
                $regionselect = drupal_get_form('rm_shop_smartregionselect');
				$block['content'] = theme('rm_shop_theme_smart_entry_header', array(
                    'vars' => array(
                        'regionselect' => $regionselect,
                    ),
                ));
			}
			return $block;
	}
}

function rm_shop_smartregionselect($form, &$form_state) {
	$form = array();
    $form['address'] = array(
        '#type' => 'textfield',
        '#required' => TRUE,
        '#title' => t('Address'),
    );

    
    $form['street_number'] = array(
        '#type' => 'hidden',
        '#attributes' => array('id' => 'street_number'),
    );
    $form['route'] = array(
        '#type' => 'hidden',
        '#attributes' => array('id' => 'route'),
    );
    $form['thoroughfare'] = array(
        '#type' => 'hidden',
        '#attributes' => array('id' => 'thoroughfare'),
    );
    $form['locality'] = array(
        '#type' => 'hidden',
        '#attributes' => array('id' => 'locality'),
    );
    $form['postal_code'] = array(
        '#type' => 'hidden',
        '#attributes' => array('id' => 'postal_code'),
    );
    
    if(rm_user_has_provided_address()) {
        $form['address']['#default_value'] = $_SESSION['regionselect']['street'] . ', ' . $_SESSION['regionselect']['zip'] . ' ' . $_SESSION['regionselect']['city'];
        $form['thoroughfare']['#default_value'] = $_SESSION['regionselect']['street'];
        $form['locality']['#default_value'] = $_SESSION['regionselect']['city'];
        $form['postal_code']['#default_value'] = $_SESSION['regionselect']['zip'];
    }

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Set your location'),
	);
	return $form;
}

function rm_shop_smartregionselect_validate($form, &$form_state) {
    if(empty($form_state['values']['thoroughfare']) || empty($form_state['values']['postal_code']) || empty($form_state['values']['locality'])) {
        $result = rm_api_google_address_check_fulltext($form_state['values']['address']);
        $valid = rm_api_validate_google_address($result);
        if(empty($valid)) {
            $counter = 0;
            if(isset($result->results[0]->address_components)) {
                foreach($result->results[0]->address_components as $component) {
                    switch($component->types[0]) {
                        case "street_number": $counter++; $form_state['values']['street_number'] = $component->long_name; break;
                        case "locality": $counter++; $form_state['values']['locality'] = $component->long_name; break;
                        case "route": $counter++; $form_state['values']['thoroughfare'] = $component->long_name; break;
                        case "postal_code": $counter++; $form_state['values']['thoroughfare'] = $component->long_name; break;
                    }
                }
            }
            if($counter >= 4) {
                $form_state['values']['gmapsdata'] = $result;
            }
            else {
                form_set_error('address', t('We cannot confirm your address. Please check if you entered it alright.'));
            }
        }
        else {
            foreach($valid as $error) {
                form_set_error('address', $error);
            }
        }
    }
    else {
        $result = rm_api_google_address_check($form_state['values']['thoroughfare'], $form_state['values']['postal_code'], $form_state['values']['locality']);
        $valid = rm_api_validate_google_address($result);
        if(!empty($valid)) {
            form_set_error('address', $valid[0]);
        }
        else {
            $form_state['values']['gmapsdata'] = $result;
        }
    }
}

function rm_shop_smartregionselect_submit($form, &$form_state) {
    $street = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'route');
    $house_no = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'street_number');
    $zip = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'postal_code');
    $city = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'locality', 'long_name');
    $_SESSION['regionselect'] = array(
        'street' => $street . ' ' . $house_no,
        'zip' => $zip,
        'city' => $city,
    );
}

function rm_shop_regionselect($form, &$form_state) {
	$form = array();
    // $form['street'] = array(
        // '#type' => 'textfield',
        // '#required' => TRUE,
        // '#title' => t('Street'),
    // );
	$form['zipcode'] = array(
		'#type' => 'textfield',
		'#required' => TRUE,
		'#title' => t('Postal code'),
	);
    // $form['city'] = array(
        // '#type' => 'textfield',
        // '#required' => TRUE,
        // '#title' => t('City'),
    // );
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Find vendor'),
	);
	return $form;
}

function rm_shop_regionselect_validate($form, &$form_state) {
    $result = rm_api_google_address_check($form_state['values']['street'], $form_state['values']['zipcode'], $form_state['values']['city']);
    $valid = rm_api_validate_google_address($result);
    if(!empty($valid)) {
        form_set_error('street', $valid[0]);
        form_set_error('zipcode');
        form_set_error('city');
    }
    else {
        $form_state['values']['gmapsdata'] = $result;
    }
}

function rm_shop_regionselect_submit($form, &$form_state) {
    $street = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'route');
    $house_no = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'street_number');
    $zip = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'postal_code');
    $city = rm_api_gmapsdata_get_element($form_state['values']['gmapsdata'], 'locality', 'long_name');
    drupal_goto('lieferanten/' . $city . '/' . $zip . '/' . $street . ' ' . $house_no);
}


function rm_shop_get_spotxml($suid) {
    
    $pickup_agreement_objects = rm_api_get_nodes_by_properties(array('pickup_agreement'), 1, -1, -1, -1, -1, $suid);

    $pickup_agreements = array();
    if(!empty($pickup_agreement_objects)) {
        foreach($pickup_agreement_objects as $nid=>$value) {

            if( !empty($value->field_address[LANGUAGE_NONE][0]['thoroughfare']) &&
                !empty($value->field_address[LANGUAGE_NONE][0]['locality']) &&
                !empty($value->field_location[LANGUAGE_NONE][0]['lat']) &&
                !empty($value->field_location[LANGUAGE_NONE][0]['lon'])
                ) {
                $address = $value->field_address[LANGUAGE_NONE][0]['thoroughfare'];
                if(isset($value->field_address[LANGUAGE_NONE][0]['premise']) && !empty($value->field_address[LANGUAGE_NONE][0]['premise'])) {
                    $address .= ', ' . $value->field_address[LANGUAGE_NONE][0]['premise'];
                }
                if(!empty($value->field_address[LANGUAGE_NONE][0]['postal_code'])) $address .= ', ' . $value->field_address[LANGUAGE_NONE][0]['postal_code'];
                $address .= ' ' . $value->field_address[LANGUAGE_NONE][0]['locality'];
                $pickup_agreements['pickup_agreements'][] = array(
                    'nid' => $nid,
                    'address' => $address,
                    'lat' => $value->field_location[LANGUAGE_NONE][0]['lat'],
                    'lon' => $value->field_location[LANGUAGE_NONE][0]['lon'],
                );
            }
        }
    }

    $dom = new DOMDocument("1.0");
    $node = $dom->createElement("markers");
    $parnode = $dom->appendChild($node);

    header("Content-type: text/xml");

    // Iterate through the rows, adding XML nodes for each
    foreach($pickup_agreements as $type=>$more) {
        foreach($more as $key=>$row) {
            // ADD TO XML DOCUMENT NODE
            $node = $dom->createElement("marker");
            $newnode = $parnode->appendChild($node);
            $newnode->setAttribute("nid", $row['nid']);
            $newnode->setAttribute("address", $row['address']);
            $newnode->setAttribute("lat", $row['lat']);
            $newnode->setAttribute("lng", $row['lon']);
        }
    }

    echo $dom->saveXML();
}

function rm_shop_get_participantxml() {

    $time = time();
    $cacheexpire = $time - 1;
    //Get children of parent item (cache this)
    $cached = cache_get('directoryGoogleMap');
    if($cached && $cached->created > $cacheexpire) {
        $participants = $cached->data;
    }
    else {
        cache_clear_all('directoryGoogleMap', 'cache', TRUE);

        $participantobjects = rm_api_get_nodes_by_properties(array('customer_profile', 'seller_profile'), -1, 1);

        $participants = array();
        foreach($participantobjects as $nid=>$value) {

            if( !empty($value->field_address[LANGUAGE_NONE][0]['thoroughfare']) &&
                !empty($value->field_address[LANGUAGE_NONE][0]['locality']) &&
                !empty($value->field_location[LANGUAGE_NONE][0]['lat']) &&
                !empty($value->field_location[LANGUAGE_NONE][0]['lon'])
                ) {
                $address = $value->field_address[LANGUAGE_NONE][0]['thoroughfare'];
                if(isset($value->field_address[LANGUAGE_NONE][0]['premise']) && !empty($value->field_address[LANGUAGE_NONE][0]['premise'])) {
                    $address .= ', ' . $value->field_address[LANGUAGE_NONE][0]['premise'];
                }
                if(!empty($value->field_address[LANGUAGE_NONE][0]['postal_code'])) $address .= ', ' . $value->field_address[LANGUAGE_NONE][0]['postal_code'];
                $address .= ' ' . $value->field_address[LANGUAGE_NONE][0]['locality'];
                if($value->status != 1 && $value->prospect != 1) {
                   $index = 'inactive_profile';
                }
                elseif($value->status != 1 && $value->prospect == 1) {
                   $index = 'prospect_profile';
                }
                else {
                   $index = $value->type;
                }
                $participants[$index][] = array(
                    'title' => l($value->title, 'node/' . $nid),
                    'address' => $address,
                    'lat' => $value->field_location[LANGUAGE_NONE][0]['lat'],
                    'lon' => $value->field_location[LANGUAGE_NONE][0]['lon'],
                );
            }
        }

        cache_set('directoryGoogleMap', $participants);
    }


    $dom = new DOMDocument("1.0");
    $node = $dom->createElement("markers");
    $parnode = $dom->appendChild($node);

    header("Content-type: text/xml");

    // Iterate through the rows, adding XML nodes for each
    foreach($participants as $type=>$more) {
        foreach($more as $key=>$row) {
            // ADD TO XML DOCUMENT NODE
            $node = $dom->createElement("marker");
            $newnode = $parnode->appendChild($node);
            $newnode->setAttribute("name",$row['title']);
            $newnode->setAttribute("address", $row['address']);
            $newnode->setAttribute("lat", $row['lat']);
            $newnode->setAttribute("lng", $row['lon']);
            $newnode->setAttribute("type", $type);
        }
    }

    echo $dom->saveXML();
}