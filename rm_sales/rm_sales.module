<?php

/**
* Implements hook_menu().
*/
function rm_sales_menu() {
    $items = array();
    $items['admin/config/rmsales'] = array(
        'title' => 'Regiomino Sales',
        'description' => 'Regiomino sales settings',
        'position' => 'left',
        'weight' => -100,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('administer site configuration'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );
	$items['admin/config/rmsales/profileimport'] = array(
        'title' => 'Regiomino profile import',
        'description' => 'Import profiles from xls files.',
        'page callback' => 'drupal_get_form', // function called when path is requested
        'page arguments' => array('rm_sales_admin_profile_import'), // form id passed to the function
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'rm_sales.admin.inc', // look for a function describing this form in this file
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
	$items['admin/config/rmsales/offerimport'] = array(
        'title' => 'Regiomino offer import',
        'description' => 'Import offers from xls files.',
        'page callback' => 'drupal_get_form', // function called when path is requested
        'page arguments' => array('rm_sales_admin_offer_import'), // form id passed to the function
        'access arguments' => array('administer site configuration'),
        'type' => MENU_NORMAL_ITEM,
        'file' => 'rm_sales.admin.inc', // look for a function describing this form in this file
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['presse'] = array(
        'title' => 'Press',
        'page callback' => 'rm_sales_press',
        'access arguments' => array('access content'),
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/conflate/%'] = array(
        'title' => 'Sales',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_sales_conflate_profiles_form', 2),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/addsuggesters/%'] = array(
        'title' => 'Sales',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_sales_addsuggesters_form', 2),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/sales'] = array(
        'title' => 'Sales',
        'page callback' => 'rm_sales_profilecare_form',
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
        'type' => MENU_NORMAL_ITEM,
    );
	// $items['manage/sales/suggested'] = array(
        // 'title' => '1. Adopt profile suggestions',
        // 'type' => MENU_DEFAULT_LOCAL_TASK,
        // 'weight' => 0,
      // );
	// $items['manage/sales/assigned'] = array(
    // 'title' => '2. Complete profiles',
    // 'page callback' => 'drupal_get_form',
		// 'page arguments' => array('rm_sales_profileset_form'),
		// 'access callback' => 'rm_sales_user_is_salesguy',
    // 'file' => 'rm_sales.inc',
    // 'file path' => drupal_get_path('module', 'rm_sales'),
    // 'type' => MENU_LOCAL_TASK,
    // 'weight' => 1,
  // );
    $items['manage/sales/salesperformance'] = array(
        'title' => 'Sales Performance',
        'page callback' => 'rm_sales_salesperformance',
        'access callback' => 'rm_user_is_analyst',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 4,
    );
    
    $items['rm-sales-getstatistics'] = array(
        'page callback' => 'rm_sales_get_statistics',
        'access callback' => 'rm_user_is_analyst',
    );
	$items['manage/sales/manage'] = array(
        'title' => 'Supervise profiles',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );
	$items['manage/sales/manage/export'] = array(
        'page callback' => 'rm_sales_export_profiles',
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/sales/useraccounts'] = array(
        'title' => 'User accounts',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_sales_useraccounts_form'),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
    );
    $items['manage/sales/salesguyactivity'] = array(
        'title' => 'Salesguy Activity',
        'page callback' => 'rm_sales_salesguyactivity',
        'access callback' => 'rm_user_is_admin',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 4,
    );
  $items['manage/sales/addoffertable/%'] = array(
    'title' => 'Sales',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('rm_sales_offertable_add', 3),
		'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/addnote/%'] = array(
    'title' => 'Sales',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('rm_sales_note_add', 3),
		'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/sendinvite/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_user_send_registration_invite',
    'page arguments' => array(3),
    'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_user.module',
    'file path' => drupal_get_path('module', 'rm_user'),
  );

  $items['manage/sales/assignprofile/%/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_assignprofile',
		'page arguments' => array(3,4),
		'access callback' => 'rm_sales_assignprofile_access',
		'access arguments' => array(3,4),
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/changepriority/%/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_changepriority',
		'page arguments' => array(3,4),
        'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/updatecomment/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_updatecomment',
		'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/updateofferinfourl/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_updateofferinfourl',
		'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/updatenextaction/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_updatenextaction',
		'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
    $items['manage/sales/makeprospect/%'] = array(
        'title' => 'Sales',
        'page callback' => 'rm_sales_makeprospect',
        'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/sales/removeprospect/%'] = array(
        'title' => 'Sales',
        'page callback' => 'rm_sales_removeprospect',
        'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/sales/suppress/%'] = array(
        'title' => 'Sales',
        'page callback' => 'rm_sales_suppress',
        'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
    $items['manage/sales/unsuppress/%'] = array(
        'title' => 'Sales',
        'page callback' => 'rm_sales_unsuppress',
        'page arguments' => array(3),
        'access callback' => 'rm_sales_user_is_salesguy',
        'file' => 'rm_sales.inc',
        'file path' => drupal_get_path('module', 'rm_sales'),
    );
  $items['manage/sales/changeprofiletype/%/%'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_changeprofiletype',
		'page arguments' => array(3,4),
		'access callback' => 'rm_sales_user_is_salesguy',
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/%/edit'] = array(
    'title' => 'Sales',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('rm_sales_editprofile', 2),
		'access callback' => 'rm_sales_editprofile_access',
		'access arguments' => array(2),
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/%/delete'] = array(
    'title' => 'Sales',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('rm_sales_deletenode', 2),
		'access callback' => 'rm_sales_deletenode_access',
		'access arguments' => array(2),
    'file' => 'rm_sales.inc',
    'file path' => drupal_get_path('module', 'rm_sales'),
  );
  $items['manage/sales/%/publish'] = array(
    'title' => 'Sales',
    'page callback' => 'rm_sales_publishprofile',
		'page arguments' => array(2),
		'access callback' => 'rm_sales_publishprofile_access',
		'access arguments' => array(2),
  );
	return $items;
}

function rm_sales_get_statistics() {
    
    $time = time();
    //Cache for 1 day = 86400 seconds
    $cacheexpire = $time - 86400;
    //Get children of parent item (cache this)
    $cached = cache_get('salesStatistics');
    if($cached && $cached->created > $cacheexpire) {
        $graphs = $cached->data;
    }
    else {
        cache_clear_all('salesStatistics', 'cache', TRUE);
        
        $graphs = array();
        
        $result = db_select('node', 'n')
            ->fields('n', array('created', 'type'))
            ->condition('type', array('seller_profile', 'customer_profile', 'trader_profile'), 'IN')
            ->execute();
        
        /**
         * Determine amount of created profiles per month
         */
        $createdProfilesPerMonth = array();
        $createdCustomerProfilesPerMonth = array();
        $createdSellerProfilesPerMonth = array();
        $createdTraderProfilesPerMonth = array();
        
        while($record = $result->fetchAssoc()) {
            $createdProfilesPerMonth[strtotime(date('Y-m', $record['created']))][] = TRUE;
            if($record['type'] == 'customer_profile') $createdCustomerProfilesPerMonth[strtotime(date('Y-m', $record['created']))][] = TRUE;
            if($record['type'] == 'seller_profile') $createdSellerProfilesPerMonth[strtotime(date('Y-m', $record['created']))][] = TRUE;
            if($record['type'] == 'trader_profile') $createdTraderProfilesPerMonth[strtotime(date('Y-m', $record['created']))][] = TRUE;
        }

        
        //Transfer to x/y-axis value pairs
        $flotCreatedProfiles = array();
        if(!empty($createdProfilesPerMonth)) {
            //Sort ascending by month
            ksort($createdProfilesPerMonth);
            foreach($createdProfilesPerMonth as $yearmonth => $booleans) {
                $amount = count($booleans);
                $flotCreatedProfiles[] = array($yearmonth*1000, $amount);
            }
        }
        
        $flotCreatedCustomerProfiles = array();
        if(!empty($createdCustomerProfilesPerMonth)) {
            //Sort ascending by month
            ksort($createdCustomerProfilesPerMonth);
            foreach($createdCustomerProfilesPerMonth as $yearmonth => $booleans) {
                $amount = count($booleans);
                $flotCreatedCustomerProfiles[] = array($yearmonth*1000, $amount);
            }
        }
        
        $flotCreatedSellerProfiles = array();
        if(!empty($createdSellerProfilesPerMonth)) {
            //Sort ascending by month
            ksort($createdSellerProfilesPerMonth);
            foreach($createdSellerProfilesPerMonth as $yearmonth => $booleans) {
                $amount = count($booleans);
                $flotCreatedSellerProfiles[] = array($yearmonth*1000, $amount);
            }
        }
        
        $flotCreatedTraderProfiles = array();
        if(!empty($createdTraderProfilesPerMonth)) {
            //Sort ascending by month
            ksort($createdTraderProfilesPerMonth);
            foreach($createdTraderProfilesPerMonth as $yearmonth => $booleans) {
                $amount = count($booleans);
                $flotCreatedTraderProfiles[] = array($yearmonth*1000, $amount);
            }
        }
        
        $graphs['profiles'] = array(
            array(
                'label' => t('created profiles'),
                'data' => $flotCreatedProfiles,
            ),
            array(
                'label' => t('created customer profiles'),
                'data' => $flotCreatedCustomerProfiles,
            ),
            array(
                'label' => t('created seller profiles'),
                'data' => $flotCreatedSellerProfiles,
            ),
            array(
                'label' => t('created trader profiles'),
                'data' => $flotCreatedTraderProfiles,
            ),
        );
        
        
        //Load all order items
        $query = new EntityFieldQuery();
        $tmp = $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', array('order_item'))
            ->propertyCondition('uid', 1, '>')
            ->fieldCondition('field_order_status', 'value', array('processing', 'accepted', 'delivered', 'billed'))
            ->execute();
        $order_items = array();
        if(!empty($tmp['node'])) {
            $order_items = entity_load('node', array_keys($tmp['node']));
        }
        
        $query = db_select('node', 'n');
        $query->join('field_data_field_order_status', 's', 'n.nid = s.entity_id');
        $query->join('field_data_field_order_amount', 'a', 'n.nid = a.entity_id');
        $query->join('field_data_field_tu_price', 'p', 'n.nid = p.entity_id');
        $query->join('field_data_field_commission', 'c', 'n.nid = c.entity_id');
        $query->condition('s.entity_type', 'node');
        $query->condition('a.entity_type', 'node');
        $query->condition('p.entity_type', 'node');
        $query->condition('c.entity_type', 'node');
        $query->condition('n.type', array('order_item'), 'IN');
        $query->condition('n.uid', 1, '>');
        $query->condition('s.field_order_status_value', array('processing', 'accepted', 'delivered', 'billed'), 'IN');
        $query->groupBy('n.nid');
        $query->fields('s', array('field_order_status_value'));
        $query->fields('a', array('field_order_amount_value'));
        $query->fields('p', array('field_tu_price_value'));
        $query->fields('c', array('field_commission_value'));
        $query->fields('n', array('created'));

        $result = $query->execute();
        
        $order_items = array();
        while($record = $result->fetchAssoc()) {
            $order_items[] = $record;
        }
        
        /**
         * Determine amount of order items per month
         */
        $orderItemsPerMonth = array();
        if(!empty($order_items)) {
            foreach($order_items as $order_item) {
                $orderItemsPerMonth[strtotime(date('Y-m', $order_item['created']))][] = TRUE;
            }
        }
        
        //Transfer to x/y-axis value pairs
        $flotOrderItems = array();
        if(!empty($orderItemsPerMonth)) {
            //Sort ascending by month
            ksort($orderItemsPerMonth);
            foreach($orderItemsPerMonth as $yearmonth => $booleans) {
                $amount = count($booleans);
                $flotOrderItems[] = array($yearmonth*1000, $amount);
            }
        }
        
        $graphs['orderitems'] = array(
            array(
                'label' => t('Order items'),
                'data' => $flotOrderItems,
            ),
        );
        
        
        
        /**
         * Determine sales per month
         */
        $orderSalesPerMonth = array();
        $orderCommissionPerMonth = array();
        if(!empty($order_items)) {
            foreach($order_items as $order_item) {
                $orderSalesPerMonth[strtotime(date('Y-m', $order_item['created']))] += $order_item['field_tu_price_value'] * $order_item['field_order_amount_value'];
                $orderCommissionPerMonth[strtotime(date('Y-m', $order_item['created']))] += $order_item['field_tu_price_value'] * $order_item['field_order_amount_value'] * $order_item['field_commission_value'] / 100;
            }
        }
        
        //Transfer to x/y-axis value pairs
        $flotOrderSales = array();
        if(!empty($orderSalesPerMonth)) {
            //Sort ascending by month
            ksort($orderSalesPerMonth);
            foreach($orderSalesPerMonth as $yearmonth => $amount) {
                $flotOrderSales[] = array($yearmonth*1000, $amount);
            }
        }
        
        //Transfer to x/y-axis value pairs
        $flotOrderCommission = array();
        if(!empty($orderCommissionPerMonth)) {
            //Sort ascending by month
            ksort($orderCommissionPerMonth);
            foreach($orderCommissionPerMonth as $yearmonth => $amount) {
                $flotOrderCommission[] = array($yearmonth*1000, $amount);
            }
        }
        
        $graphs['ordersales'] = array(
            array(
                'label' => t('Order sales'),
                'data' => $flotOrderSales,
            ),
            array(
                'label' => t('Order commission'),
                'data' => $flotOrderCommission,
            ),
        );
        
        
        cache_set('salesStatistics', $graphs);
    }  

    print json_encode($graphs);
}

function rm_sales_publishprofile($nid, $goto = TRUE) {
    $validation = rm_api_node_validate_required($nid);
    $nodeobject = node_load($nid);
    
	if(empty($validation)) {
		$userexists = user_load_by_mail($nodeobject->field_email[LANGUAGE_NONE][0]['email']);
		if(!$userexists) {
			//create user for registree
			$password = user_password(8);
			//set up the user fields
			$fields = array(
				'name' => $nodeobject->field_email[LANGUAGE_NONE][0]['email'],
				'mail' => $nodeobject->field_email[LANGUAGE_NONE][0]['email'],
				'pass' => $password,
				'status' => 1,
				'init' => $nodeobject->field_email[LANGUAGE_NONE][0]['email'],
				'roles' => array(
					DRUPAL_AUTHENTICATED_RID => 'authenticated user',
				),
			);
            if($nodeobject->type == 'seller_profile') $fields['roles'][4] = 'seller';
			//the first parameter is left blank so a new user is created
			$account = user_save('', $fields);
			$account->password = $fields['pass'];
			$uid = $account->uid;
            $result = rm_api_mailchimp_subscribe(
                $nodeobject->field_email[LANGUAGE_NONE][0]['email'],
                array(
                    'FNAME' => $nodeobject->title,
                    'LNAME' => $nodeobject->field_address[LANGUAGE_NONE][0]['locality'],
                    'SALUTATION' => 'Herr',
                    'ROLES' => 'authenticated user, seller'
                )
            );
			//drupal_mail('rm_user', 'profile_published_user_registered', $nodeobject->field_email[LANGUAGE_NONE][0]['email'], NULL, array('account' => $account, 'password' => $password), variable_get('site_mail', 'support@regiomino.de'));
            
            $nodeobject->uid = $uid;
            $nodeobject->field_user_reference[LANGUAGE_NONE][0]['target_id'] = $uid;
            node_save($nodeobject);
            
            rm_api_node_publish($nid);
            
            global $user;
            rm_user_activity(
                t('Published profile <a href="@url">@profile</a>', array('@url' => url('node/' . $nodeobject->nid), '@profile' => $nodeobject->title)),
                $nodeobject->nid,
                'node',
                $user->uid
            );
            
            drupal_set_message(t('Profile <a href="@url">@profile</a> has been published', array('@url' => url('node/' . $nodeobject->nid), '@profile' => $nodeobject->title)), 'status');
		}
		else {
			drupal_set_message(t('A user already exists with an identical email address as set in the profile. Please make sure you are not trying to publish a duplicate.'), 'status');
		}
    }
    else {
        drupal_set_message(t('Profile <a href="@url">@profile</a> has not been published due to a validation error', array('@url' => url('node/' . $nodeobject->nid), '@profile' => $nodeobject->title)), 'error');
        drupal_set_message(print_r($validation, TRUE), 'error');
    }
	if($goto) drupal_goto();
}

function rm_sales_profilecare_filter_form($form, &$form_state) {

	$queryparams = drupal_get_query_parameters();
    
	$form['#method'] = 'get';
    
    $form['#attributes'] = array('class' => array('form-inline'));
	
    $form['profilecarefilter']['properties'] = array(
        '#type' => 'fieldset',
    );
    
	$form['profilecarefilter']['properties']['sales_step'] = array(
		'#type' => 'select',
        '#title' => 'Status',
		'#options' => array(
            'all' => 'Alle (ohne "Sleep")',
            'lead' => 'Lead',
			'prospect' => 'Prospect',
			'registered' => 'Registriert',
			'suppressed' => 'Sleep',
		),
		'#multiple' => FALSE,
        '#default_value' => 'all',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['sales_step'])) $form['profilecarefilter']['properties']['sales_step']['#default_value'] = $queryparams['sales_step'];
    
    $priovalues = list_allowed_values(field_info_field('field_priority'));
    $priovalues[-1] = 'Alle';
    
    $form['profilecarefilter']['properties']['priority'] = array(
		'#type' => 'select',
        '#title' => '&nbsp;&nbsp;Prio',
		'#options' => $priovalues,
		'#multiple' => FALSE,
        '#default_value' => -1,
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['priority'])) $form['profilecarefilter']['properties']['priority']['#default_value'] = $queryparams['priority'];
    
    $form['profilecarefilter']['properties']['profiletype'] = array(
		'#type' => 'select',
        '#title' => '&nbsp;&nbsp;Typ',
		'#options' => array(
            'all' => 'Alle',
            'customer_profile' => 'Gastronom',
			'seller_profile' => 'Lieferant',
		),
		'#multiple' => FALSE,
        '#default_value' => 'all',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['profiletype'])) $form['profilecarefilter']['properties']['profiletype']['#default_value'] = $queryparams['profiletype'];
    
    $users = rm_user_get_users_by_role('salesguy');
    $userobjects = entity_load('user', $users);
    $useroptions = array('-1' => 'Alle', '-2' => 'Nicht zugewiesen', '-3' => 'Zugewiesen');
    if(isset($userobjects)) {
        foreach($userobjects as $userobject) {
            $useroptions[$userobject->uid] = format_username($userobject);
        }
    }
    
    $form['profilecarefilter']['properties']['salesguy'] = array(
		'#type' => 'select',
        '#title' => '&nbsp;&nbsp;Vertriebler',
		'#options' => $useroptions,
		'#multiple' => FALSE,
        '#default_value' => -1,
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['salesguy'])) $form['profilecarefilter']['properties']['salesguy']['#default_value'] = $queryparams['salesguy'];

    $form['profilecarefilter']['values'] = array(
        '#type' => 'fieldset',
    );
    
    $form['profilecarefilter']['values']['title'] = array(
		'#type' => 'textfield',
        '#title' => 'Name',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#size' => 15,
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['title'])) $form['profilecarefilter']['values']['title']['#default_value'] = $queryparams['title'];
    
    $form['profilecarefilter']['values']['source_url'] = array(
		'#type' => 'textfield',
        '#title' => '&nbsp;&nbsp;Quelle',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#size' => 15,
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['source_url'])) $form['profilecarefilter']['values']['source_url']['#default_value'] = $queryparams['source_url'];
    
    $form['profilecarefilter']['values']['street'] = array(
		'#type' => 'textfield',
        '#title' => '&nbsp;&nbsp;Straße',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#size' => 15,
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['street'])) $form['profilecarefilter']['values']['street']['#default_value'] = $queryparams['street'];
    
    $form['profilecarefilter']['values']['zip'] = array(
		'#type' => 'textfield',
        '#title' => '&nbsp;&nbsp;PLZ',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#size' => 5,
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['zip'])) $form['profilecarefilter']['values']['zip']['#default_value'] = $queryparams['zip'];
    
    
    $form['profilecarefilter']['values']['locality'] = array(
		'#type' => 'textfield',
        '#title' => '&nbsp;&nbsp;Ort',
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#size' => 10,
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['locality'])) $form['profilecarefilter']['values']['locality']['#default_value'] = $queryparams['locality'];

    
    // $form['profilecarefilter']['sales_step'] = array(
		// '#type' => 'textfield',
		// '#options' => array(
			// '1' => 'Veröffentlicht',
			// '0' => 'Unveröffentlicht',
		// ),
		// '#multiple' => TRUE,
		// '#size' => 2,
		// '#default_value' => 1,
	// );
	// if(isset($queryparams['publish_status']) && !empty($queryparams['publish_status'])) $form['alloffersfilter']['publish_status']['#default_value'] = $queryparams['publish_status'];
	
	// $form['alloffersfilter']['sale_status'] = array(
		// '#type' => 'select',
		// '#options' => array(
			// '0' => 'Aktiv',
			// '1' => 'Beendet',
		// ),
		// '#multiple' => TRUE,
		// '#size' => 2,
		// '#default_value' => 0,
	// );
	// if(isset($queryparams['sale_status']) && !empty($queryparams['sale_status'])) $form['alloffersfilter']['sale_status']['#default_value'] = $queryparams['sale_status'];
    
    $destination = drupal_get_destination();
	
	$form['profilecarefilter']['submit'] = array(
		'#value' => t('Filter'),
		'#type' => 'submit',
        '#attributes' => array(
            'class' => array('btn', 'btn-success'),
        ),
        '#prefix' => ' ',
        '#suffix' => ' ' . l(t('Reset'), current_path(), array('attributes' => array('class' => array('btn', 'btn-info')))),
	);
   
	return $form;
}

function rm_sales_salesguyactivity_filter_form($form, &$form_state) {

	$queryparams = drupal_get_query_parameters();
    
	$form['#method'] = 'get';
    
    $form['#attributes'] = array('class' => array('form-inline'));
	
    $form['profilecarefilter']['properties'] = array(
        '#type' => 'fieldset',
    );
    
    $users = rm_user_get_users_by_role('salesguy');
    $userobjects = entity_load('user', $users);
    $useroptions = array('-1' => 'Alle');
    if(isset($userobjects)) {
        foreach($userobjects as $userobject) {
            $useroptions[$userobject->uid] = format_username($userobject);
        }
    }
    
    $form['profilecarefilter']['properties']['salesguy'] = array(
		'#type' => 'select',
        '#title' => 'Vertriebler',
		'#options' => $useroptions,
		'#multiple' => FALSE,
        '#default_value' => -1,
        '#attributes' => array(
            'class' => array('form-control'),
        ),
        '#prefix' => '<div class="form-group">',
        '#suffix' => '</div>',
	);
    if(!empty($queryparams['salesguy'])) $form['profilecarefilter']['properties']['salesguy']['#default_value'] = $queryparams['salesguy'];
	
	$form['profilecarefilter']['submit'] = array(
		'#value' => t('Filter'),
		'#type' => 'submit',
        '#attributes' => array(
            'class' => array('btn', 'btn-success'),
        ),
        '#prefix' => ' ',
        '#suffix' => ' ' . l(t('Reset'), current_path(), array('attributes' => array('class' => array('btn', 'btn-info')))),
	);
   
	return $form;
}

function rm_sales_publishprofile_access($nid) {
	$profileobject = node_load($nid);
	global $user;
    if(rm_user_is_admin()) return TRUE;
	if(isset($profileobject->field_salesguy[LANGUAGE_NONE][0]['target_id']) && $profileobject->field_salesguy[LANGUAGE_NONE][0]['target_id'] == $user->uid) return TRUE;
}

function rm_sales_deletenode_access($nid) {
	$object = node_load($nid);
	global $user;
    if($object->type == 'seller_profile' || $object->type == 'customer_profile') {
        if(isset($object->field_salesguy[LANGUAGE_NONE][0]['target_id']) && $object->field_salesguy[LANGUAGE_NONE][0]['target_id'] == $user->uid) return TRUE;
        if(in_array('salesguy', $user->roles) && $object->uid == 0) return TRUE;
    }
    else if($object->type == 'shipping_agreement' || $object->type == 'dispatch_agreement' || $object->type == 'pickup_agreement' || $object->type == 'payment_agreement') {
        if(rm_sales_user_is_salesguy()) return TRUE;
    }
    else {
        if(rm_user_is_admin()) return TRUE;
    }
}

function rm_sales_user_is_salesguy() {
	global $user;
	return in_array('salesguy', $user->roles) ? TRUE : FALSE;
}

function rm_sales_assignprofile_access($nid, $uid) {
	$userobject = user_load($uid);
	if(!in_array('salesguy', $userobject->roles)) return FALSE;
	$nodeobject = node_load($nid);
	if(isset($nodeobject->type) && $nodeobject->type != 'customer_profile' && $nodeobject->type != 'seller_profile') return FALSE;
	return TRUE;
}

/**
 * Implements a form for suggesting participant profiles
 * @return array
 */
function rm_sales_suggest_form($form, &$form_state) {

    $form['suggest']['necessary'] = array(
        '#type' => 'fieldset',
        '#title' => t('These infos we need...'),
    );
	$form['suggest']['necessary']['type'] = array(
		'#type' => 'radios',
		'#title' => t('Vendor, gastronomy or trader'),
		'#options' => array(
			'seller_profile' => t('Vendor'),
			'customer_profile' => t('Gastronomy'),
			'trader_profile' => t('Trader'),
		),
		'#required' => TRUE,
	);
	
	$form['suggest']['necessary']['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Name of the vendor, gastronomy or trader'),
		'#required' => TRUE,
	);

	$form['suggest']['necessary']['locality'] = array(
		'#type' => 'textfield',
		'#title' => t('City'),
		'#required' => TRUE,
	);

    $form['suggest']['nicetohave'] = array(
        '#type' => 'fieldset',
        '#title' => t('... and these infos are helpful'),
    );
    
    $form['suggest']['nicetohave']['thoroughfare'] = array(
		'#type' => 'textfield',
		'#title' => t('Street'),
		'#required' => FALSE,
	);

    $form['suggest']['nicetohave']['postal_code'] = array(
        '#type' => 'textfield',
        '#title' => t('Postal code'),
        '#required' => FALSE,
    );

	$form['suggest']['nicetohave']['phone'] = array(
		'#type' => 'textfield',
		'#title' => t('Phone'),
		'#required' => FALSE,
	);

	$form['suggest']['nicetohave']['suggester'] = array(
		'#type' => 'textfield',
		'#title' => t('E-Mail of suggester'),
		'#required' => FALSE,
	);

    $form['suggest']['nicetohave']['owner'] = array(
        '#type' => 'checkbox',
        '#title' => t('I am the owner'),
        '#required' => FALSE,
    );

	global $user;
	if($user->uid > 0) {
		$form['suggest']['nicetohave']['suggester']['#default_value'] = $user->mail;
	}

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Suggest'),
    );
	
	return $form;
}

/**
* Implements hook_mollom_form_list().
*/
function rm_sales_mollom_form_list() {
  $forms['rm_sales_suggest_form'] = array(
    'title' => t('Suggest form'),
  );
  return $forms;
}
/**
* Implements hook_mollom_form_info().
*/
function rm_sales_mollom_form_info() {
  $form_info = array(
    'mode' => MOLLOM_MODE_CAPTCHA,
  );
  return $form_info;
}

/**
 * Validation callback for rm_sales_suggest_form().
 * @param $form
 * @param $form_state
 */
function rm_sales_suggest_form_validate($form, &$form_state) {
	if(!empty($form_state['values']['postal_code'])) {
		if(!is_numeric($form_state['values']['postal_code'])) form_set_error('postal_code', t('Please enter a numeric value as postal code'));
	}
	if(!empty($form_state['values']['phone'])) {
		if(!is_numeric($form_state['values']['phone'])) form_set_error('phone', t('Please enter a numeric value as phone number'));
	}
	
}

/**
 * Submit callback for rm_sales_suggest_form().
 * @param $form
 * @param $form_state
 */
function rm_sales_suggest_form_submit($form, &$form_state) {

    $owner = (!empty($form_state['values']['owner'])) ? 1 : 0;
	$new_node = rm_api_create_new_node(
		$form_state['values']['type'], //Type
		$form_state['values']['title'], //Title
		'de', //Language
		0, //Uid of author
		0, //Status
		0, //Suppressed
		0, //Sticky
		0, //Promote
        $owner //Prospect
	);
	
	//Store fields
	$new_node->field_address[LANGUAGE_NONE][0] = array(
		'country' => 'de',
		'administrative_area' => NULL,
		'sub_administrative_area' => NULL,
		'locality' => '',
		'dependent_locality' => '',
		'postal_code' => '',
		'thoroughfare' => '',
		'premise' => '',
		'sub_premise' => NULL,
		'organisation_name' => '',
		'name_line' => NULL,
		'first_name' => NULL,
		'last_name' => NULL,
		'data' => NULL,
	);
	if(!empty($form_state['values']['locality'])) $new_node->field_address[LANGUAGE_NONE][0]['locality'] = $form_state['values']['locality'];
	if(!empty($form_state['values']['thoroughfare'])) $new_node->field_address[LANGUAGE_NONE][0]['thoroughfare'] = $form_state['values']['thoroughfare'];
	if(!empty($form_state['values']['postal_code'])) $new_node->field_address[LANGUAGE_NONE][0]['postal_code'] = $form_state['values']['postal_code'];
	if(!empty($form_state['values']['phone'])) {
		$new_node->field_publicphone[LANGUAGE_NONE][0]['number'] = $form_state['values']['phone'];
		$new_node->field_publicphone[LANGUAGE_NONE][0]['country_codes'] = 'de';
	}
	
	if(!empty($form_state['values']['suggester'])) $new_node->field_suggester[LANGUAGE_NONE][0]['value'] = $form_state['values']['suggester'];
	
	//if suggester is sales person, then store him in field_salesguy
	$suggester = user_load_by_mail($form_state['values']['suggester']);
	$enteredbysales = FALSE;
	
    if(!empty($suggester)) {
        if(in_array('salesguy', $suggester->roles)) {
            $new_node->field_salesguy[LANGUAGE_NONE][0]['target_id'] = $suggester->uid;
            $enteredbysales = TRUE;
            $new_node->sticky = 1;
        }
    }
    
    $new_node->field_priority[LANGUAGE_NONE][0]['value'] = 9;
    $new_node->field_next_action[LANGUAGE_NONE][0]['value'] = 1924988399;

	node_save($new_node);
	
	if(!$enteredbysales) {
		if(!empty($form_state['values']['suggester'])) {
			drupal_set_message(t('Thank you very much! We will contact @name as soon as possible and let you know when he/she joins us.', array('@name' => $form_state['values']['title'])), 'status');
		}
		else {
			drupal_set_message(t('Thank you very much! We will contact @name as soon as possible.', array('@name' => $form_state['values']['title'])), 'status');
		}
	}
	else {
		drupal_set_message(t('Thank you very much! @name has been entered and assigned to your <a href="@url">sales</a> account.', array('@name' => $form_state['values']['title'], '@url' => 'user/register?destination=manage/sales/assigned')), 'status');
	}
	
	//Log activity
	global $user;
	if($user->uid > 0 && !empty($suggester) && $suggester->uid > 0 && $user->uid != $suggester->uid) {
		rm_user_activity(
			t('Suggested profile <a href="@url">@profile</a> but entered user @targetuser as the suggester', array('@url' => url('node/' . $new_node->nid), '@profile' => $new_node->title, '@targetuser' => $suggester->mail)),
			$new_node->nid,
			'node',
			$user->uid
		);
	}
	elseif($user->uid > 0 && !empty($suggester) && $suggester->uid > 0 && $user->uid == $suggester->uid) {
		rm_user_activity(
			t('Suggested profile <a href="@url">@profile</a>', array('@url' => url('node/' . $new_node->nid), '@profile' => $new_node->title)),
			$new_node->nid,
			'node',
			$user->uid
		);
	}
	elseif($user->uid > 0 && (empty($suggester) || $suggester->uid == 0)) {
		rm_user_activity(
			t('Suggested profile <a href="@url">@profile</a> but did not enter himself as suggester', array('@url' => url('node/' . $new_node->nid), '@profile' => $new_node->title)),
			$new_node->nid,
			'node',
			$user->uid
		);	
	}
	elseif($user->uid == 0 && !empty($suggester) && $suggester->uid > 0) {
		rm_user_activity(
			t('An anonymous user suggested a profile <a href="@url">@profile</a> and set user @triggeruser as the suggester', array('@triggeruser' => $suggester->mail, '@url' => url('node/' . $new_node->nid), '@profile' => $new_node->title)),
			$new_node->nid,
			'node',
			$suggester->uid
		);	
	}
	
}

/**
 * Implements hook_theme().
 */
function rm_sales_theme() {
	return array(
		'rm_sales_theme_press' => array(
			'template' => 'rm_sales_press_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
        'rm_sales_theme_salesperformance' => array(
			'template' => 'rm_sales_salesperformance_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
	);
}

function rm_sales_editprofile_access($nid) {
	global $user;
	$profileobject = node_load($nid);
    if(rm_user_is_admin()) return TRUE;
	if(isset($profileobject->field_salesguy[LANGUAGE_NONE][0]['target_id']) && $profileobject->field_salesguy[LANGUAGE_NONE][0]['target_id'] == $user->uid) return TRUE;
	if(isset($profileobject->uid) && $profileobject->uid > 0 && $profileobject->uid == $user->uid) return TRUE;
}