<?php

function rm_user_enforce_login($message = NULL, $type = 'status') {
    global $user;
    if($user->uid <= 0) {
        if($message) drupal_set_message($message, $type);
        drupal_goto('user/register', array('query' => drupal_get_destination()));
    }
}

function rm_user_has_provided_address() {
    if( !isset($_SESSION['regionselect']['zip']) || empty($_SESSION['regionselect']['zip']) ||
        !isset($_SESSION['regionselect']['street']) || empty($_SESSION['regionselect']['street']) ||
        !isset($_SESSION['regionselect']['city']) || empty($_SESSION['regionselect']['city'])) {
        return FALSE;
    }
    else {
        return TRUE;
    }
}

function rm_user_get_profile($uid) {
    $query = new EntityFieldQuery();
    $tmp = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', array('seller_profile', 'customer_profile', 'trader_profile'))
        ->propertyCondition('status', 1)
        ->propertyCondition('uid', $uid)
        ->execute();
    $profile = array();
    if(isset($tmp['node'])) {
        $profiles = entity_load('node', array_keys($tmp['node']));
        $profileskeys = array_keys($profiles);
        $profile = $profiles[$profileskeys[0]];
    }
    return $profile;
}

function rm_user_get_footer_links() {
    return array(
        array(t('Imprint'), 'node/1', array()),
        array(t('About us'), 'node/3', array()),
        array(t('Help & Contact'), 'kontakt', array()),
        array(t('Press'), 'presse', array()),
        array(t('Sitemap'), 'sitemap', array()),
        array(t('News'), 'https://www.facebook.com/regiomino', array('external' => TRUE)),
        array(t('Jobs'), 'jobs', array()),
        array(t('Privacy'), 'node/2', array()),
        array(t('Terms & Conditions'), 'node/4', array()),
    );
}

function rm_user_get_navbar() {
    global $user;
    $html = '';
    if($user->uid > 0) {
        $account = user_load($user->uid);
        
        if($user->uid == 1) $html .= l(t('<span class="@class"></span> @linktitle', array('@class' => 'fa fa-wrench', '@linktitle' => t('Admin'))), 'admin', array('query' => drupal_get_destination(), 'html' => TRUE, 'attributes' => array('class' => array('navi-link')))) . ' ';
        
        //Verwaltungs-Link für Verkäufer
        if(in_array('seller', $account->roles)) {
            $html .= l(t('<span class="@class"></span> @linktitle', array('@class' => 'fa fa-user', '@linktitle' => format_username($user))), 'manage/seller/' . $user->uid, array('html' => TRUE,'attributes' => array('class' => array('navi-link')))) . ' ';
        }
        //Verwaltungs-Link für Vertriebler
        else if(in_array('salesguy', $account->roles)) {
            $html .= l(t('<span class="@class"></span> @linktitle', array('@class' => 'fa fa-user', '@linktitle' => format_username($user))), 'manage/sales', array('html' => TRUE, 'attributes' => array('class' => array('navi-link')))) . ' ';
        }
        //Verwaltungs-Link für Gastronomen/Kunden
        else {
            $html .= l(t('<span class="@class"></span> @linktitle', array('@class' => 'fa fa-user', '@linktitle' => format_username($user))), 'manage/customer/' . $user->uid, array('html' => TRUE, 'attributes' => array('class' => array('navi-link')))) . ' ';
        }
        
        $html .= l(t('@linktitle', array('@linktitle' => t('Log out'))), 'user/logout', array('html' => TRUE, 'attributes' => array('class' => array('navi-link'))));
    }
    else {
        $html .= l(t('@linktitle', array('@linktitle' => t('Log in'))), 'user/register', array('query' => drupal_get_destination(), 'html' => TRUE, 'attributes' => array('class' => array('navi-link'))));
    }
    return $html;
}

// function rm_user_may_checkout() {
    // global $user;
    // $commercial_profiles = array();
    // if($user->uid > 0) {
        // $commercial_profiles = rm_api_get_nodes_by_properties(array('seller_profile', 'customer_profile'), -1, -1, -1, -1, -1, $user->uid);
    // }
    // if(!rm_user_is_admin() && empty($commercial_profiles)) {
        // return FALSE;
    // }
    // else {
        // return TRUE;
    // }
// }

function rm_user_get_account_completeness($uid) {
    $userfields = field_info_instances('user');
    $allfields = count($userfields['user']);
    $userobject = user_load($uid);
    $filledfields = 0;
    foreach($userfields['user'] as $field_name => $field_value) {
        if(!empty($userobject->{$field_name})) $filledfields++;
    }
    return round($filledfields/$allfields, 2);
}

function rm_user_get_profile_completeness($profileid, $bundle) {
    $profilefields = field_info_instances('node', $bundle);
    unset($profilefields['field_next_action']);
    unset($profilefields['field_priority']);
    unset($profilefields['field_salesguy']);
    unset($profilefields['field_suggester']);
    unset($profilefields['field_salescomment']);
    unset($profilefields['field_register_hash']);
    unset($profilefields['field_gtc_accepted']);
    unset($profilefields['field_kleinunternehmer']);
    unset($profilefields['field_publicfax']);
    $nodeobject = node_load($profileid);
    if($nodeobject->type != 'seller_profile') unset($profilefields['field_sellercategories']);
    $allfields = count($profilefields);
    $filledfields = 0;
    foreach($profilefields as $field_name => $field_value) {
        if(!empty($nodeobject->{$field_name})) {
            $filledfields++;
        }
    }
    return round($filledfields/$allfields, 2);
}

/**
* Checks if a user has the admin role
*
* @param $uid
*   The user id of the user to be checked. If left at null, the current user is detected
*
* @return boolean
*/
function rm_user_is_admin($uid = NULL) {
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $account = user_load($uid);
    return (in_array('admin', $account->roles)) ? TRUE : FALSE;
}

/**
* Checks if a user has the analyst role
*
* @param $uid
*   The user id of the user to be checked. If left at null, the current user is detected
*
* @return boolean
*/
function rm_user_is_analyst($uid = NULL) {
    if(rm_user_is_admin()) return TRUE;
    if(is_null($uid)) {
        global $user;
        $uid = $user->uid;
    }
    $account = user_load($uid);
    return (in_array('analyst', $account->roles)) ? TRUE : FALSE;
}

/**
* Returns all users for a given role
*
* @param $role
*   The role that all users are supposed to have
*
* @return array
*/
function rm_user_get_users_by_role($role) {
    $static = &drupal_static(__FUNCTION__);
    if(!isset($static[$role])) {
        $query = db_select('users', 'u');
        $query->join('users_roles', 'ur', 'u.uid = ur.uid');
        $query->join('role', 'r', 'ur.rid = r.rid');
        $query->fields('u',array('uid'));
        $query->condition('r.name', $role, '=');
        $result = $query->execute();
        $uids = array();
        while($record = $result->fetchAssoc()) {
            $uids[] = $record['uid'];
        }
        $static[$role] = $uids;
    }
    return $static[$role];
}

/**
* Implements hook_menu().
*/
function rm_user_menu() {
	$items = array();

     $items['process-applications'] = array(
    'title' => 'Transactions',
    'page callback' => 'rm_user_process_applications',
		'access arguments' => array('access content'),
    'file' => 'rm_user.inc',
    'file path' => drupal_get_path('module', 'rm_user'),
    'type' => MENU_NORMAL_ITEM,
  ); 
  
    $items['manage/customer/%user'] = array(
        'title' => 'Customer',
        'page callback' => 'rm_user_dashboard',
        'access callback' => 'rm_user_user_is_customer',
        'file' => 'rm_user.inc',
        'file path' => drupal_get_path('module', 'rm_user'),
        'type' => MENU_NORMAL_ITEM,
    );
	$items['manage/customer/%user/dashboard'] = array(
        'title' => 'Dashboard',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 0,
    );
    $items['manage/customer/%user/orders'] = array(
        'title' => 'Manage orders',
        'page callback' => 'rm_user_orders',
        'access callback' => 'rm_user_user_is_customer',
        'file' => 'rm_user.inc',
        'file path' => drupal_get_path('module', 'rm_user'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 0,
    );
	$items['manage/customer/%user/profile'] = array(
        'title' => 'Manage profile',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_user_editprofile', 2),
        'access callback' => 'rm_user_editprofile_access',
		'access arguments' => array(2),
        'file' => 'rm_user.inc',
        'file path' => drupal_get_path('module', 'rm_user'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
    );
	$items['manage/customer/%user/account'] = array(
        'title' => 'Manage account',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('user_profile_form', 2),
        'access callback' => 'user_edit_access',
        'access arguments' => array(2),
        'file' => 'user.pages.inc',
        'file path' => drupal_get_path('module', 'user'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
    );
  
  $items['manage/myaccount'] = array(
    'title' => 'Transactions',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('rm_user_myaccount', 'transactions_purchase'),
		'access arguments' => array('authenticated user'),
    'file' => 'rm_user.inc',
    'file path' => drupal_get_path('module', 'rm_user'),
    'type' => MENU_NORMAL_ITEM,
  );
	$items['manage/myaccount/purchase'] = array(
    'title' => 'Purchase Transactions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['manage/myaccount/sales'] = array(
    'title' => 'Sales Transactions',
    'page callback' => 'drupal_get_form',
		'page arguments' => array('rm_user_myaccount', 'transactions_sales'),
		'access arguments' => array('authenticated user'),
    'file' => 'rm_user.inc',
    'file path' => drupal_get_path('module', 'rm_user'),
    'type' => MENU_LOCAL_TASK,
  );
    $items['user/%/shadow/%'] = array(
        'page callback' => 'rm_user_shadow',
        'page arguments' => array(1,3),
        'access callback' => 'rm_user_may_be_shadowed',
        'access arguments' => array(1,3),
	);
    $items['user/%/disable/%'] = array(
        'page callback' => 'rm_user_disable',
        'page arguments' => array(1,3),
        'access callback' => 'rm_user_is_admin',
	);
    $items['user/%/enable/%'] = array(
        'page callback' => 'rm_user_enable',
        'page arguments' => array(1,3),
        'access callback' => 'rm_user_is_admin',
	);
	$items['registration/%/%'] = array(
        'title' => 'Registration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('rm_user_profile_registration', 1),
        'access callback' => 'rm_user_valid_register_link',
		'access arguments' => array(1,2),
        'file' => 'rm_user.inc',
        'file path' => drupal_get_path('module', 'rm_user'),
        'type' => MENU_NORMAL_ITEM,
    );
	return $items;
}

function rm_user_user_is_customer() {
    if(rm_user_is_admin()) return TRUE;
    global $user;
    $account = user_load($user->uid);
    if(in_array('authenticated user', $account->roles)) return TRUE;
}

function rm_user_may_be_shadowed($cuid, $tuid) {
    global $user;
    if($tuid == 1) return FALSE;
    if(rm_user_is_admin()) return TRUE;
    if(rm_sales_user_is_salesguy()) {
        $query = new EntityFieldQuery();
        $tmp = $query
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', array('seller_profile', 'customer_profile'))
            ->fieldCondition('field_salesguy', 'target_id', $user->uid)
            ->execute();
        $alluids = array();
        if(isset($tmp['node'])) {
            $allprofiles = entity_load('node', array_keys($tmp['node']));
            if(isset($allprofiles)) {
                foreach($allprofiles as $nid => $profile) {
                    $alluids[$profile->uid] = TRUE;
                }
            }
        }
        if(in_array($tuid, array_keys($alluids))) return TRUE;
    }
}

function rm_user_disable($cuid, $tuid) {
	if (rm_user_is_admin() && $tuid != 1) {
		$tuserobject = user_load($tuid);
        $tuserobject->status = 0;
        user_save($tuserobject);
        drupal_goto();
    }
	else {
		drupal_access_denied();
	}
}

function rm_user_enable($cuid, $tuid) {
	if (rm_user_is_admin() && $tuid != 1) {
		$tuserobject = user_load($tuid);
        $tuserobject->status = 1;
        user_save($tuserobject);
        drupal_goto();
    }
	else {
		drupal_access_denied();
	}
}

function rm_user_shadow($cuid, $tuid) {
    global $user;
    $tuserobject = user_load($tuid);
    $cuserobject = user_load($user->uid);
    $user = user_load($tuid);
    $login_array = array ('name' => $user->name);
    drupal_set_message(t('You are now logged in as @username', array('@username' => format_username($user))));
    user_login_finalize($login_array);
    drupal_goto();
}

/**
 * Implements hook_username_alter.
 * @param $name
 * @param $account
 */
function rm_user_username_alter(&$name, $account) {
	if($account->uid > 0) {
        $account = user_load($account->uid);
        if(isset($account->field_first_name[LANGUAGE_NONE][0]['value']) && !empty($account->field_first_name[LANGUAGE_NONE][0]['value']) && isset($account->field_last_name[LANGUAGE_NONE][0]['value']) && !empty($account->field_last_name[LANGUAGE_NONE][0]['value'])) {
            $name = $account->field_first_name[LANGUAGE_NONE][0]['value'] . ' ' . $account->field_last_name[LANGUAGE_NONE][0]['value'];
        }
        else {
            $name = $account->mail;
        }
    }
}

/**
 * Function to easily store an entry in the users activity log
 *
 * @param $message
 *		The message that describes the action the user took
 *
 * @param $entityid
 *		The id of the entity that the users action is related to
 *
 * @param entitytype
 *		The entity type that the users action is related to
 *
 * @param uid
 *		The uid of the user that took the action. If left at null this is set to the current users uid.
 */
function rm_user_activity($message, $entityid = NULL, $entitytype = NULL, $uid = NULL) {
	if(is_null($uid)) {
		global $user;
		$uid = $user->uid;
	}
	
	$new_node = rm_api_create_new_node('activity_log', substr(strip_tags($message), 0, 128), 'de', $uid, 1, 0, 0, 0);
	
	$new_node->body[LANGUAGE_NONE][0]['value'] = $message;
	if(!is_null($entityid)) $new_node->field_entityid[LANGUAGE_NONE][0]['value'] = $entityid;
	if(!is_null($entitytype)) $new_node->field_entitytype[LANGUAGE_NONE][0]['value'] = $entitytype;
	
	node_save($new_node);
}

/**
 * Function to easily store a transaction in the userobject
 *
 * @param $amount
 *		The amount of the transaction
 *
 * @param $reason
 *		The reason for the transaction
 *
 * @param $node_type
 *		The name of the node type (e.g. 'transactions_purchase' for purchase transactions
 *		or 'transactions_sales' for selling transactions
 *
 * @param $entityid
 *		The id of the entity that the transaction is related to
 *
 * @param entitytype
 *		The entity type that the transaction is related to
 *
 * @param uid
 *		The uid of the user that receives the transaction. If left at null this is set to the current users uid.
 */
function rm_user_transaction($amount, $reason, $node_type, $entityid = NULL, $entitytype = NULL, $uid = NULL) {

	if(is_null($uid)) {
		global $user;
		$uid = $user->uid;
	}
	
	$query = new EntityFieldQuery();
	$tmp = $query
		->entityCondition('entity_type', 'node')
		->entityCondition('bundle', $node_type)
		->propertyCondition('status', 1)
		->propertyOrderBy('created', 'DESC')
		->execute();
	if(isset($tmp['node'])) {
		$allnids = array_keys($tmp['node']);
		$txn_node = node_load($allnids[0]);
	}
	if(isset($txn_node)) {
		$balance = $amount + $txn_node->field_balance[LANGUAGE_NONE][0]['value'];
	}
	else {
		$balance = $amount;
	}
	
	$new_node = rm_api_create_new_node($node_type, substr(strip_tags($reason), 0, 128), 'de', $uid, 1, 0, 0, 0);
	
	$new_node->body[LANGUAGE_NONE][0]['value'] = $reason;
	$new_node->field_amount[LANGUAGE_NONE][0]['value'] = $amount;
	$new_node->field_balance[LANGUAGE_NONE][0]['value'] = $balance;
	if(!is_null($entityid)) $new_node->field_entityid[LANGUAGE_NONE][0]['value'] = $entityid;
	if(!is_null($entitytype)) $new_node->field_entitytype[LANGUAGE_NONE][0]['value'] = $entitytype;
	
	node_save($new_node);
}

/**
 * Implements hook_theme().
 */
function rm_user_theme() {
	return array(
        'rm_user_theme_orders' => array(
			'template' => 'rm_user_orders_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
        'rm_user_theme_dashboard' => array(
			'template' => 'rm_user_dashboard_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
        'rm_user_theme_registration_invite_mail' => array(
			'template' => 'rm_user_registration_invite_mail_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
        'rm_user_theme_gtc_accepted_mail' => array(
			'template' => 'rm_user_gtc_accepted_mail_theme',
			'variables' => array(
				'vars' => NULL,
			)
		),
		'rm_user_profile_registration' => array(
			'template' => 'rm_user_profile_registration_theme',
            'arguments' => array('form' => 'form'),
			'render element' => 'form',
		),
	);
}

function rm_user_mail($key, &$message, $params) {
	global $base_url;
	global $base_path;
	switch($key) {
		//switching on $key lets you create variations of the email based on the $key parameter
		case 'profile_published_user_registered':
			$message['subject'] = 'Ihr Profil auf regiomino.de';

			$message['body'][] = '<p>Hi,</p><p>Ihr Profil auf www.regiomino.de wurde freigeschaltet und es wurde ein neues Benutzerkonto für Sie angelegt. Sie können sich jetzt mit folgenden Daten auf www.regiomino.de anmelden.</p><p>E-Mail: ' . $params['account']->mail . '<br />Passwort: ' . $params['password'] . '</p><p>Viele Grüße,<br />Ihr Regiomino-Team</p>';
			
		break;
        case 'gtc_accepted':
			$message['subject'] = 'Vielen Dank für Ihre Registrierung';
            
			$message['body'][] = theme('rm_user_theme_gtc_accepted_mail', array(
                                        'vars' => array(
                                            'profileobject' => $params['profileobject'],
                                            'profileuser' => $params['profileuser'],
                                            'password' => $params['password'],
                                            'gtc' => node_load(4),
                                        ),
                                    ));
			
            $message['headers'] += $params['headers'];
            
		break;
        case 'registration_invite':
			$message['subject'] = 'Vielen Dank für Ihr Interesse an Regiomino';
            
			$message['body'][] = theme('rm_user_theme_registration_invite_mail', array(
                                        'vars' => array(
                                            'profileobject' => $params['profileobject'],
                                            'profileuser' => $params['profileuser'],
                                        ),
                                    ));
                                    
			$message['headers'] += $params['headers'];
            
		break;
	}
}

function rm_user_has_accepted_gtc($nid) {
    $profileobject = node_load($nid);
    $profileobject->field_gtc_accepted[LANGUAGE_NONE][0]['value'] = 1;
    node_save($profileobject);
    $password = user_password(5);
    $edit['pass'] = $password;
    $userobject = user_load($profileobject->uid);
    user_save($userobject, $edit);
    
    drupal_mail('rm_user', 'gtc_accepted', $profileobject->field_email[LANGUAGE_NONE][0]['email'], NULL, array('profileobject' => $profileobject, 'profileuser' => $userobject, 'password' => $password, 'headers' => array('Bcc' => 'registrations@regiomino.de')), variable_get('site_mail', 'support@regiomino.de'));
    //drupal_mail('rm_user', 'gtc_accepted', 'abgefangen@regiomino.de', NULL, array('profileobject' => $profileobject, 'profileuser' => $userobject, 'password' => $password), variable_get('site_mail', 'support@regiomino.de'));
}

function rm_user_valid_register_link($nid, $hash) {
    $profileobject = node_load($nid);
    if(
        $profileobject->field_register_hash[LANGUAGE_NONE][0]['value'] == $hash &&
        empty($profileobject->field_gtc_accepted[LANGUAGE_NONE][0]['value'])
    ) {
        return TRUE;
    }
}

function rm_user_send_registration_invite($nid, $goto = TRUE) {
    $profileobject = node_load($nid);
    $userobject = user_load($profileobject->uid);
    $profileobject->field_register_hash[LANGUAGE_NONE][0]['value'] = rm_api_generate_random_string(10);
    node_save($profileobject);
    
    drupal_mail('rm_user', 'registration_invite', $profileobject->field_email[LANGUAGE_NONE][0]['email'], NULL, array('profileobject' => $profileobject, 'profileuser' => $userobject, 'headers' => array('Bcc' => 'invites@regiomino.de')), variable_get('site_mail', 'support@regiomino.de'));
    //drupal_mail('rm_user', 'registration_invite', 'abgefangen@regiomino.de', NULL, array('profileobject' => $profileobject, 'profileuser' => $userobject), variable_get('site_mail', 'support@regiomino.de'));
    if($goto) drupal_goto();
}

function rm_user_gtc_accepted($nid) {
    $profileobject = node_load($nid);
    if(!empty($profileobject->field_gtc_accepted[LANGUAGE_NONE][0]['value']) && $profileobject->field_gtc_accepted[LANGUAGE_NONE][0]['value'] == 1) {
        return TRUE;
    }
    else {
        return FALSE;
    }
}

function rm_user_address_complete($uid) {
    $userobject = user_load($uid);
    if( !empty($userobject->field_address[LANGUAGE_NONE][0]['thoroughfare']) &&
        !empty($userobject->field_address[LANGUAGE_NONE][0]['postal_code']) &&
        !empty($userobject->field_address[LANGUAGE_NONE][0]['locality'])
    ) {
        return $userobject;
    }
    else {
        return FALSE;
    }
}

function rm_user_editprofile_access($account) {
	global $user;
    $profilenodes = rm_api_get_nodes_by_properties(array('seller_profile', 'customer_profile', 'trader_profile'), -1, -1, -1, -1, -1, $user->uid);
    $profilekeys = array_keys($profilenodes);
	$profileobject = $profilenodes[$profilekeys[0]];
    if(rm_user_is_admin()) return TRUE;
	if(isset($profileobject->field_salesguy[LANGUAGE_NONE][0]['target_id']) && $profileobject->field_salesguy[LANGUAGE_NONE][0]['target_id'] == $user->uid) return TRUE;
	if(isset($profileobject->uid) && $profileobject->uid > 0 && $profileobject->uid == $user->uid) return TRUE;
}

/**
 * Alter the login form to include cart data.
 *
 * This is necessary if an anonymous user fills a shopping cart
 * and then decides to login with an already existing account. After logging in
 * drupal starts a new session for the logged in user. The old session id,
 * which is used to identify anonymous carts, gets replaced by a new one when the
 * user login form is submitted.
 * This means anonymous carts cannot be connected to the user anymore if
 * he or she logs in with his or her account. With this alteration the old session id gets
 * passed on through an additional invisible field in the user login form
 * and can be read by any function that takes place after submitting the login data.
 */
function rm_user_form_user_login_alter(&$form, &$form_state) {
	$sessionid = session_id();
	$form['sessiondata'] = array(
		'#type' => 'value',
		'#value' => $sessionid,
	);
}

/**
 * Alter the login form to include cart data.
 *
 * This is necessary if an anonymous user fills a shopping cart
 * and then decides to login with an already existing account. After logging in
 * drupal starts a new session for the logged in user. The old session id,
 * which is used to identify anonymous carts, gets replaced by a new one when the
 * user login form is submitted.
 * This means anonymous carts cannot be connected to the user anymore if
 * he or she logs in with his or her account. With this alteration the old session id gets
 * passed on through an additional invisible field in the user login form
 * and can be read by any function that takes place after submitting the login data.
 */
function rm_user_form_user_login_block_alter(&$form, &$form_state) {
	$sessionid = session_id();
	$form['sessiondata'] = array(
		'#type' => 'value',
		'#value' => $sessionid,
	);
}

/**
 * Alter the registration form to include cart data.
 *
 * This is necessary if an anonymous user fills a shopping cart
 * and then decides to register a new account. After registration
 * drupal starts a new session for the registered user. The old session id,
 * which is used to identify anonymous carts, gets replaced by a new one when the
 * user registration form is submitted.
 * This means anonymous carts cannot be connected to the user anymore if
 * he or she registers an account. With this alteration the old session id gets
 * passed on through an additional invisible field in the user registration form
 * and can be read by any function that takes place after submitting the registration.
 */
function rm_user_form_user_register_form_alter(&$form, &$form_state) {
	$sessionid = session_id();
	$form['sessiondata'] = array(
		'#type' => 'value',
		'#value' => $sessionid,
	);
}

/**
 * Hook into user login process to transfer anonymous carts to a user id
 *
 * This is necessary if an anonymous user fills a shopping cart
 * and then decides to login with an existing account.
 * With this function the shopping cart id is correctly transferred from an
 * anonymous session id to a unique user id.
 */
function rm_user_user_login(&$edit, $account) {
	//Check if an old session id has been passed on by the user login form
	if(isset($edit['values']['sessiondata'])) {
		//Retrieve the old session id
		$oldsession = $edit['values']['sessiondata'];
		//Get the user id of the now logged in user
		$uid = $account->uid;
		rm_cart_change_session_to_uid($oldsession, $uid);
	}
}

/**
 * Hook into user insert process to transfer anonymous carts to a user id
 *
 * This is necessary if an anonymous user fills a shopping cart
 * and then decides to register a new account.
 * With this function the shopping cart id is correctly transferred from an
 * anonymous session id to a unique user id.
 */
function rm_user_user_insert(&$edit, $account, $category) {
    //Check if an old session id has been passed on by the user login form
	if(isset($edit['values']['sessiondata'])) {
		//Retrieve the old session id
		$oldsession = $edit['values']['sessiondata'];
		//Get the user id of the now logged in user
		$uid = $account->uid;
		rm_cart_change_session_to_uid($oldsession, $uid);
	}
    
    if( !empty($account->mail) &&
        !empty($account->field_first_name[LANGUAGE_NONE][0]['value']) &&
        !empty($account->field_last_name[LANGUAGE_NONE][0]['value']) &&
        !empty($account->field_gender[LANGUAGE_NONE][0]['value'])
    ) {
        $result = rm_api_mailchimp_subscribe(
            $account->mail,
            array(
                'FNAME' => $account->field_first_name[LANGUAGE_NONE][0]['value'],
                'LNAME' => $account->field_last_name[LANGUAGE_NONE][0]['value'],
                'SALUTATION' => ($account->field_gender[LANGUAGE_NONE][0]['value'] == 'f') ? 'Frau' : 'Herr',
                'ROLES' => 'authenticated user'
            )
        );
    }
}